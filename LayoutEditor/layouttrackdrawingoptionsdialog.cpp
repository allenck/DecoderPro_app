#include "layouttrackdrawingoptionsdialog.h"
#include "loggerfactory.h"
#include "layouttrackdrawingoptions.h"
#include "gridbagconstraints.h"
#include "gridbaglayout.h"
#include "jframe.h"
#include <QPushButton>
#include "layouteditor.h"
#include "jmricolorchooser.h"
#include "colorutil.h"

/**
 * Handle changing layout editor drawing options
 *
 * @author George Warner Copyright (c) 2017-2018
 */
// /*public*/ class LayoutTrackDrawingOptionsDialog extends JDialog {

/**
 * Creates new form LayoutTrackDrawingOptionsDialog
 */
/*public*/ LayoutTrackDrawingOptionsDialog::LayoutTrackDrawingOptionsDialog(LayoutEditor* layoutEditor, bool modal,
        LayoutTrackDrawingOptions* ltdOptions) : JDialog(layoutEditor, modal) {
    //super(layoutEditor, modal);

    this->layoutEditor = layoutEditor;
    this->leLTDOptions = ltdOptions;
    this->ltdOptions = new LayoutTrackDrawingOptions(ltdOptions);

    classicPresetName = tr("Classic JMRI");
    draftingPresetName = tr("Drafting");
    realisticPresetName = tr("Realistic");
    realisticOhPresetName = tr("Realistic Oh!");
    british70sPresetName = tr("British 70's");
    csdazd71PresetName = tr("ČSD AŽD-71");
    customPresetName = tr("Custom");
    ltdoList = QList<LayoutTrackDrawingOptions*>();


    initComponents();
    this->setTitle(tr("Set Track Drawing Options"));
    setLocationRelativeTo(layoutEditor);
    definePresets();
    pack();
}

/**
 * This method is called from within the constructor to initialize the form.
 * WARNING: Do NOT modify this code. The content of this method is always
 * regenerated by the Form Editor.
 */
// <editor-fold defaultstate="collapsed" desc="Generated Code">
/*private*/ void LayoutTrackDrawingOptionsDialog::initComponents() {
    GridBagConstraints gridBagConstraints;

    optionsPanel = new QGroupBox();
    optionLabel = new QLabel();
    mainlineLabel = new QLabel();
    railCountLabel = new QLabel();
    mainRailCountSpinner = new QSpinBox();
    sideRailCountSpinner = new QSpinBox();
    railWidthLabel = new QLabel();
    mainRailWidthSpinner = new QSpinBox();
    sideRailWidthSpinner = new QSpinBox();
    railGapLabel = new QLabel();
    sideRailGapSpinner = new QSpinBox();
    mainRailGapSpinner = new QSpinBox();
    railColorLabel = new QLabel();
    mainRailColorButton = new QPushButton();
    sideRailColorButton = new QPushButton();
    blockLineWidthLabel = new QLabel();
    mainBlockLineWidthSpinner = new QSpinBox();
    sideBlockLineWidthSpinner = new QSpinBox();
    ballastWidthLabel = new QLabel();
    mainBallastWidthSpinner = new QSpinBox();
    sideBallastWidthSpinner = new QSpinBox();
    ballastColorLabel = new QLabel();
    mainBallastColorButton = new QPushButton();
    sideBallastColorButton = new QPushButton();
    tieLengthLabel = new QLabel();
    mainTieLengthSpinner = new QSpinBox();
    sideTieLengthSpinner = new QSpinBox();
    tieWidthLabel = new QLabel();
    mainTieWidthSpinner = new QSpinBox();
    sideTieWidthSpinner = new QSpinBox();
    tieGapLabel = new QLabel();
    mainTieGapSpinner = new QSpinBox();
    sideTieGapSpinner = new QSpinBox();
    tieColorLabel = new QLabel();
    mainTieColorButton = new QPushButton();
    sideTieColorButton = new QPushButton();
    sidelineLabel = new QLabel();
    blockLineDashPercentageX10Label = new QLabel();
    mainBlockLineDashPercentageX10Spinner = new QSpinBox();
    sideBlockLineDashPercentageX10Spinner = new QSpinBox();
    jPanelButtons = new QWidget();
    presetsLabel = new QLabel();
    presetsComboBox = new QComboBox();
    applyButton = new QPushButton();
    cancelButton = new QPushButton();
    okButton = new QPushButton();

    setDefaultCloseOperation(JFrame::DISPOSE_ON_CLOSE);
    setTitle(tr("Set Track Drawing Options"));
    resize(QSize(512, 329));

    //optionsPanel.setBorder(BorderFactory.createTitledBorder(ltdOptions->getName()));
    optionsPanel->setTitle(ltdOptions->getName());
    QString     gbStyleSheet = "QGroupBox { border: 2px solid gray; border-radius: 3px;} QGroupBox::title { /*background-color: transparent;*/  subcontrol-position: top left; /* position at the top left*/  padding:0 0px;} ";
    optionsPanel->setStyleSheet(gbStyleSheet);
    GridBagLayout* optionsPanelLayout = new GridBagLayout();
    optionsPanelLayout->columnWidths( QList<int>() << 0<< 5<< 0<< 5<< 0);
    optionsPanelLayout->rowHeights(QList<int>() << 0<< 5<< 0<< 5<< 0<< 5<< 0<< 5<< 0<< 5<< 0<< 5<< 0<< 5<< 0<< 5<< 0<< 5<< 0<< 5<< 0<< 5<< 0<< 5<< 0);
    optionsPanel->setLayout(optionsPanelLayout);

    //optionLabel.setFont(optionLabel.getFont().deriveFont(optionLabel.getFont().getStyle() | Font.BOLD));
    QFont f = optionLabel->font();
    f.setBold(true);
    optionLabel->setFont(f);
    optionLabel->setText(tr("Options"));
    optionLabel->setToolTip(tr("This column contains the available options"));
    gridBagConstraints = GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = GridBagConstraints::HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints::BASELINE_LEADING;
    gridBagConstraints.weightx = 100.0;
    optionsPanelLayout->addWidget(optionLabel, gridBagConstraints);

//    mainlineLabel.setFont(mainlineLabel.getFont().deriveFont(mainlineLabel.getFont().getStyle() | Font.BOLD));
    f = mainlineLabel->font();
    f.setBold(true);
    mainlineLabel->setFont(f);
    mainlineLabel->setText(tr("Mainline"));
    mainlineLabel->setToolTip(tr("This column is for mainline options"));
    gridBagConstraints = GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = GridBagConstraints::HORIZONTAL;
    gridBagConstraints.weightx = 30.0;
    optionsPanelLayout->addWidget(mainlineLabel, gridBagConstraints);

    railCountLabel->setText(tr("Rail Count"));
    railCountLabel->setToolTip(tr("Use the spinner to the right to set the number of rails"));
    gridBagConstraints = GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = GridBagConstraints::HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints::BASELINE_LEADING;
    optionsPanelLayout->addWidget(railCountLabel, gridBagConstraints);

    //mainRailCountSpinner.setModel(new SpinnerNumberModel(1, 0, 3, 1));
    mainRailCountSpinner->setValue(1);
    mainRailCountSpinner->setMinimum(0);
    mainRailCountSpinner->setMaximum(3);
    mainRailCountSpinner->setSingleStep(1);
    mainRailCountSpinner->setToolTip(tr("Click this button to set the number of mainline rails"));
//    mainRailCountSpinner->setName(""); // NOI18N
    mainRailCountSpinner->setValue(ltdOptions->getMainRailCount());
//    mainRailCountSpinner.addChangeListener(new event.ChangeListener() {
//        /*public*/ void stateChanged(event.ChangeEvent evt) {
//            mainRailCountSpinnerStateChanged(evt);
//        }
//    });
    connect(mainRailCountSpinner, SIGNAL(valueChanged(int)), this, SLOT(mainRailCountSpinnerStateChanged(int)));
    gridBagConstraints = GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = GridBagConstraints::HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints::BASELINE;
    optionsPanelLayout->addWidget(mainRailCountSpinner, gridBagConstraints);

    //sideRailCountSpinner.setModel(new SpinnerNumberModel(1, 0, 3, 1));
    sideRailCountSpinner->setToolTip(tr("Click this button to set the number of sideline rails"));

//    sideRailCountSpinner->setsetName(""); // NOI18N
    sideRailCountSpinner->setValue(ltdOptions->getSideRailCount());
//    sideRailCountSpinner.addChangeListener(new event.ChangeListener() {
//        /*public*/ void stateChanged(event.ChangeEvent evt) {
//            sideRailCountSpinnerStateChanged(evt);
//        }
//    });
    connect(sideRailCountSpinner, SIGNAL(valueChanged(int)), this, SLOT(sideRailCountSpinnerStateChanged(int)));
    gridBagConstraints = GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = GridBagConstraints::HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints::BASELINE;
    optionsPanelLayout->addWidget(sideRailCountSpinner, gridBagConstraints);

    railWidthLabel->setText(tr("Rail Width"));
    railWidthLabel->setToolTip(tr("Use the spinner to the right to set the width of the rails"));
    gridBagConstraints = GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.fill = GridBagConstraints::HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints::BASELINE_LEADING;
    optionsPanelLayout->addWidget(railWidthLabel, gridBagConstraints);

    //mainRailWidthSpinner.setModel(new SpinnerNumberModel(2, 0, null, 1));
    mainRailWidthSpinner->setValue(1);
    mainRailWidthSpinner->setMinimum(0);
//    mainRailWidthSpinner->setMaximum(0);
    mainRailWidthSpinner->setSingleStep(1);
    mainRailWidthSpinner->setToolTip(tr("Click this button to set the width of mainline rails"));
    mainRailWidthSpinner->setEnabled(ltdOptions->getMainRailCount() > 0);
//    mainRailWidthSpinner->setName(""); // NOI18N
    mainRailWidthSpinner->setValue(ltdOptions->getMainRailWidth());
//    mainRailWidthSpinner.addChangeListener(new event.ChangeListener() {
//        /*public*/ void stateChanged(event.ChangeEvent evt) {
//            mainRailWidthSpinnerStateChanged(evt);
//        }
//    });
    connect(mainRailWidthSpinner, SIGNAL(valueChanged(int)), this, SLOT(mainRailWidthSpinnerStateChanged(int)));

    gridBagConstraints = GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.fill = GridBagConstraints::HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints::BASELINE;
    optionsPanelLayout->addWidget(mainRailWidthSpinner, gridBagConstraints);

    //sideRailWidthSpinner.setModel(new SpinnerNumberModel(0, 0, null, 1));
    sideRailWidthSpinner->setValue(1);
    sideRailWidthSpinner->setMinimum(0);
//    sideRailWidthSpinner->setMaximum(3);
    sideRailWidthSpinner->setSingleStep(1);
    sideRailWidthSpinner->setToolTip(tr("Click this button to set the width of sideline rails"));
    sideRailWidthSpinner->setEnabled(ltdOptions->getSideRailCount() > 0);
//    sideRailWidthSpinner->setName(""); // NOI18N
    sideRailWidthSpinner->setValue(ltdOptions->getSideRailWidth());
//    sideRailWidthSpinner.addChangeListener(new event.ChangeListener() {
//        /*public*/ void stateChanged(event.ChangeEvent evt) {
//            sideRailWidthSpinnerStateChanged(evt);
//        }
//    });
    connect(sideRailWidthSpinner, SIGNAL(valueChanged(int)), this, SLOT(sideRailWidthSpinnerStateChanged(int)));

    gridBagConstraints = GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.fill = GridBagConstraints::HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints::BASELINE;
    optionsPanelLayout->addWidget(sideRailWidthSpinner, gridBagConstraints);

    railGapLabel->setText(tr("Rail Gap"));
    railGapLabel->setToolTip(tr("Use the spinner to the right to set the distance between the rails"));
    gridBagConstraints = GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 6;
    gridBagConstraints.fill = GridBagConstraints::HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints::BASELINE_LEADING;
    optionsPanelLayout->addWidget(railGapLabel, gridBagConstraints);

    //sideRailGapSpinner.setModel(new SpinnerNumberModel(1, 1, null, 1));
    sideRailGapSpinner->setValue(1);
    sideRailGapSpinner->setMinimum(0);
//    sideRailGapSpinner->setMaximum(3);
    sideRailGapSpinner->setSingleStep(1);
    sideRailGapSpinner->setToolTip(tr("Click this button to set the distance between sideline rails"));
    sideRailGapSpinner->setEnabled(ltdOptions->getSideRailCount() > 1);
//    sideRailGapSpinner->setName(""); // NOI18N
    sideRailGapSpinner->setValue(ltdOptions->getSideRailGap());
//    sideRailGapSpinner.addChangeListener(new event.ChangeListener() {
//        /*public*/ void stateChanged(event.ChangeEvent evt) {
//            sideRailGapSpinnerStateChanged(evt);
//        }
//    });
    connect(sideRailGapSpinner, SIGNAL(valueChanged(int)), this, SLOT(sideRailGapSpinnerStateChanged(int)));


    gridBagConstraints = GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.gridy = 6;
    gridBagConstraints.fill = GridBagConstraints::HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints::BASELINE;
    optionsPanelLayout->addWidget(sideRailGapSpinner, gridBagConstraints);

//    mainRailGapSpinner.setModel(new SpinnerNumberModel(1, 1, null, 1));
    mainRailGapSpinner->setValue(1);
    mainRailGapSpinner->setMinimum(0);
//    mainRailGapSpinner->setMaximum(3);
    mainRailGapSpinner->setSingleStep(1);
    mainRailGapSpinner->setToolTip(tr("Click this button to set the distance between mainline rails"));
    mainRailGapSpinner->setEnabled(ltdOptions->getMainRailCount() > 1);
//    mainRailGapSpinner->setName(""); // NOI18N
    mainRailGapSpinner->setValue(ltdOptions->getMainRailGap());
//    mainRailGapSpinner.addChangeListener(new event.ChangeListener() {
//        /*public*/ void stateChanged(event.ChangeEvent evt) {
//            mainRailGapSpinnerStateChanged(evt);
//        }
//    });
    connect(mainRailGapSpinner, SIGNAL(valueChanged(int)), this, SLOT(mainRailGapSpinnerStateChanged(int)));


    gridBagConstraints = GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 6;
    gridBagConstraints.fill = GridBagConstraints::HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints::BASELINE;
    optionsPanelLayout->addWidget(mainRailGapSpinner, gridBagConstraints);

    railColorLabel->setText(tr("Rail Color"));
    railColorLabel->setToolTip(tr("Use the buttons to the right to set the color of the rails"));
    gridBagConstraints = GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 8;
    gridBagConstraints.fill = GridBagConstraints::HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints::BASELINE_LEADING;
    optionsPanelLayout->addWidget(railColorLabel, gridBagConstraints);

    //mainRailColorButton.setBackground(ltdOptions->getMainRailColor());
    mainRailColorButton->setIcon(layoutEditor->getColourIcon(ltdOptions->getMainRailColor()));
    mainRailColorButton->setToolTip(tr("Click this button to set the color of mainline rails"));
    //mainRailColorButton.setBorder(BorderFactory.createBevelBorder(border.BevelBorder.LOWERED));
    mainRailColorButton->setEnabled(ltdOptions->getMainRailCount() > 0);
//    mainRailColorButton->setOpaque(true);
//    mainRailColorButton.addActionListener(new event.ActionListener() {
//        /*public*/ void actionPerformed(event.ActionEvent evt) {
//            mainRailColorButtonActionPerformed(evt);
//        }
//    });
    connect(mainRailColorButton, SIGNAL(clicked(bool)), this, SLOT(mainRailColorButtonActionPerformed()));

//    GroupLayout mainRailColorButtonLayout = new GroupLayout(mainRailColorButton);
//    mainRailColorButton.setLayout(mainRailColorButtonLayout);
//    mainRailColorButtonLayout.setHorizontalGroup(
//        mainRailColorButtonLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
//        .addGap(0, 0, Short.MAX_VALUE)
//    );
//    mainRailColorButtonLayout.setVerticalGroup(
//        mainRailColorButtonLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
//        .addGap(0, 0, Short.MAX_VALUE)
//    );

    gridBagConstraints = GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 8;
    gridBagConstraints.fill = GridBagConstraints::BOTH;
    gridBagConstraints.anchor = GridBagConstraints::BASELINE;
    optionsPanelLayout->addWidget(mainRailColorButton, gridBagConstraints);

//    sideRailColorButton.setBackground(ltdOptions->getSideRailColor());
    sideRailColorButton->setIcon(layoutEditor->getColourIcon(ltdOptions->getSideRailColor()));
    sideRailColorButton->setToolTip(tr("Click this button to set the color of sideline rails"));
//    sideRailColorButton.setBorder(BorderFactory.createBevelBorder(border.BevelBorder.LOWERED));
    sideRailColorButton->setEnabled(ltdOptions->getSideRailCount() > 0);
//    sideRailColorButton.setOpaque(true);
//    sideRailColorButton.addActionListener(new event.ActionListener() {
//        /*public*/ void actionPerformed(event.ActionEvent evt) {
//            sideRailColorButtonActionPerformed(evt);
//        }
//    });
    connect(sideRailColorButton, SIGNAL(clicked(bool)), this, SLOT(sideRailColorButtonActionPerformed()));

//    GroupLayout sideRailColorButtonLayout = new GroupLayout(sideRailColorButton);
//    sideRailColorButton.setLayout(sideRailColorButtonLayout);
//    sideRailColorButtonLayout.setHorizontalGroup(
//        sideRailColorButtonLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
//        .addGap(0, 0, Short.MAX_VALUE)
//    );
//    sideRailColorButtonLayout.setVerticalGroup(
//        sideRailColorButtonLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
//        .addGap(0, 0, Short.MAX_VALUE)
//    );

    gridBagConstraints = GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.gridy = 8;
    gridBagConstraints.fill = GridBagConstraints::BOTH;
    gridBagConstraints.anchor = GridBagConstraints::BASELINE;
    optionsPanelLayout->addWidget(sideRailColorButton, gridBagConstraints);

    blockLineWidthLabel->setText(tr("Block Line Width"));
    blockLineWidthLabel->setToolTip(tr("Use the spinner to the right to set the width of the block line"));
    gridBagConstraints = GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 10;
    gridBagConstraints.fill = GridBagConstraints::HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints::BASELINE_LEADING;
    optionsPanelLayout->addWidget(blockLineWidthLabel, gridBagConstraints);

    //mainBlockLineWidthSpinner.setModel(new SpinnerNumberModel(1, 1, null, 1));
    mainBlockLineWidthSpinner->setValue(1);
    mainBlockLineWidthSpinner->setMinimum(1);
//    mainBlockLineWidthSpinner->setMaximum(0);
    mainBlockLineWidthSpinner->setSingleStep(1);
    mainBlockLineWidthSpinner->setToolTip(tr("Click this button to set the width of mainline block lines"));
//    mainBlockLineWidthSpinner->setName(""); // NOI18N
    mainBlockLineWidthSpinner->setValue(ltdOptions->getMainBlockLineWidth());
//    mainBlockLineWidthSpinner.addChangeListener(new event.ChangeListener() {
//        /*public*/ void stateChanged(event.ChangeEvent evt) {
//            mainBlockLineWidthSpinnerStateChanged(evt);
//        }
//    });
    connect(mainBlockLineWidthSpinner, SIGNAL(valueChanged(int)), this, SLOT(mainBlockLineWidthSpinnerStateChanged(int)));

    gridBagConstraints = GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 10;
    gridBagConstraints.fill = GridBagConstraints::HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints::BASELINE;
    optionsPanelLayout->addWidget(mainBlockLineWidthSpinner, gridBagConstraints);

    //sideBlockLineWidthSpinner.setModel(new SpinnerNumberModel(1, 1, null, 1));
    sideBlockLineWidthSpinner->setValue(1);
    sideBlockLineWidthSpinner->setMinimum(1);
//    sideBlockLineWidthSpinner->setMaximum(0);
    sideBlockLineWidthSpinner->setSingleStep(1);
    sideBlockLineWidthSpinner->setToolTip(tr("Click this button to set the width of sideline block lines"));
//    sideBlockLineWidthSpinner->setName(""); // NOI18N
    sideBlockLineWidthSpinner->setValue(ltdOptions->getSideBlockLineWidth());
//    sideBlockLineWidthSpinner.addChangeListener(new event.ChangeListener() {
//        /*public*/ void stateChanged(event.ChangeEvent evt) {
//            sideBlockLineWidthSpinnerStateChanged(evt);
//        }
//    });
    connect(sideBlockLineWidthSpinner, SIGNAL(valueChanged(int)), this, SLOT(sideBlockLineWidthSpinnerStateChanged(int)));
    gridBagConstraints = GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.gridy = 10;
    gridBagConstraints.fill = GridBagConstraints::HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints::BASELINE;
    optionsPanelLayout->addWidget(sideBlockLineWidthSpinner, gridBagConstraints);

    ballastWidthLabel->setText(tr("Ballast Width"));
    ballastWidthLabel->setToolTip(tr("Use the spinner to the right to set the width of the ballast"));
    gridBagConstraints = GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 14;
    gridBagConstraints.fill = GridBagConstraints::HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints::BASELINE_LEADING;
    optionsPanelLayout->addWidget(ballastWidthLabel, gridBagConstraints);

    //mainBallastWidthSpinner.setModel(new SpinnerNumberModel(0, 0, null, 1));
    mainBallastWidthSpinner->setValue(0);
    mainBallastWidthSpinner->setMinimum(0);
//    mainBallastWidthSpinner->setMaximum(0);
    mainBallastWidthSpinner->setSingleStep(1);
    mainBallastWidthSpinner->setToolTip(tr("Click this button to set the width of mainline ballast"));
    mainBallastWidthSpinner->setValue(ltdOptions->getMainBallastWidth());
//    mainBallastWidthSpinner.addChangeListener(new event.ChangeListener() {
//        /*public*/ void stateChanged(event.ChangeEvent evt) {
//            mainBallastWidthSpinnerStateChanged(evt);
//        }(
//    });
    connect(mainBallastWidthSpinner, SIGNAL(valueChanged(int)), this, SLOT(mainBallastWidthSpinnerStateChanged(int)));
    gridBagConstraints =  GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 14;
    gridBagConstraints.fill = GridBagConstraints::HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints::BASELINE;
    optionsPanelLayout->addWidget(mainBallastWidthSpinner, gridBagConstraints);

    //sideBallastWidthSpinner.setModel(new SpinnerNumberModel(0, 0, null, 1));
    sideBallastWidthSpinner->setValue(0);
    sideBallastWidthSpinner->setMinimum(0);
//    sideBallastWidthSpinner->setMaximum(0);
    sideBallastWidthSpinner->setSingleStep(1);
    sideBallastWidthSpinner->setToolTip(tr("SideBallastWidthToolTip"));
    sideBallastWidthSpinner->setValue(ltdOptions->getSideBallastWidth());
//    sideBallastWidthSpinner.addChangeListener(new event.ChangeListener() {
//        /*public*/ void stateChanged(event.ChangeEvent evt) {
//            sideBallastWidthSpinnerStateChanged(evt);
//        }
//    });
    connect(sideBallastWidthSpinner, SIGNAL(valueChanged(int)), this, SLOT(sideBallastWidthSpinnerStateChanged(int)));
    gridBagConstraints =  GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.gridy = 14;
    gridBagConstraints.fill = GridBagConstraints::HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints::BASELINE;
    optionsPanelLayout->addWidget(sideBallastWidthSpinner, gridBagConstraints);

    ballastColorLabel->setText(tr("Ballast Color"));
    ballastColorLabel->setToolTip(tr("Use the buttons to the right to set the color of the ballast"));
    gridBagConstraints = GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 16;
    gridBagConstraints.fill = GridBagConstraints::HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints::BASELINE_LEADING;
    optionsPanelLayout->addWidget(ballastColorLabel, gridBagConstraints);

    //mainBallastColorButton.setBackground(ltdOptions->getMainBallastColor());
    mainBallastColorButton->setIcon(layoutEditor->getColourIcon(ltdOptions->getMainBallastColor()));
    mainBallastColorButton->setToolTip(tr("Click this button to set the color of the mainline ballast"));
//    mainBallastColorButton.setBorder(BorderFactory.createBevelBorder(border.BevelBorder.LOWERED));
    mainBallastColorButton->setEnabled(ltdOptions->getMainBallastWidth() > 0);
//    mainBallastColorButton.setOpaque(true);
//    mainBallastColorButton.addActionListener(new event.ActionListener() {
//        /*public*/ void actionPerformed(event.ActionEvent evt) {
//            mainBallastColorButtonActionPerformed(evt);
//        }
//    });
    connect(mainBallastColorButton, SIGNAL(clicked(bool)), this, SLOT(mainBallastColorButtonActionPerformed()));
#if 0
    GroupLayout mainBallastColorButtonLayout = new GroupLayout(mainBallastColorButton);
    mainBallastColorButton.setLayout(mainBallastColorButtonLayout);
    mainBallastColorButtonLayout.setHorizontalGroup(
        mainBallastColorButtonLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
        .addGap(0, 0, Short.MAX_VALUE)
    );
    mainBallastColorButtonLayout.setVerticalGroup(
        mainBallastColorButtonLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
        .addGap(0, 0, Short.MAX_VALUE)
    );
#endif
    gridBagConstraints = GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 16;
    gridBagConstraints.fill = GridBagConstraints::BOTH;
    gridBagConstraints.anchor = GridBagConstraints::BASELINE;
    optionsPanelLayout->addWidget(mainBallastColorButton, gridBagConstraints);

    //sideBallastColorButton.setBackground(ltdOptions->getSideBallastColor());
    sideBallastColorButton->setIcon(layoutEditor->getColourIcon(ltdOptions->getSideBallastColor()));
    sideBallastColorButton->setToolTip(tr("Click this button to set the color of sideline ballast"));
//    sideBallastColorButton.setBorder(BorderFactory.createBevelBorder(border.BevelBorder.LOWERED));
    sideBallastColorButton->setEnabled(ltdOptions->getSideBallastWidth() > 0);
//    sideBallastColorButton.setOpaque(true);
//    sideBallastColorButton.addActionListener(new event.ActionListener() {
//        /*public*/ void actionPerformed(event.ActionEvent evt) {
//            sideBallastColorButtonActionPerformed(evt);
//        }
//    });
    connect(sideBallastColorButton, SIGNAL(clicked(bool)), this, SLOT(sideBallastColorButtonActionPerformed()));

//    GroupLayout sideBallastColorButtonLayout = new GroupLayout(sideBallastColorButton);
//    sideBallastColorButton.setLayout(sideBallastColorButtonLayout);
//    sideBallastColorButtonLayout.setHorizontalGroup(
//        sideBallastColorButtonLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
//        .addGap(0, 0, Short.MAX_VALUE)
//    );
//    sideBallastColorButtonLayout.setVerticalGroup(
//        sideBallastColorButtonLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
//        .addGap(0, 0, Short.MAX_VALUE)
//    );

    gridBagConstraints = GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.gridy = 16;
    gridBagConstraints.fill = GridBagConstraints::BOTH;
    gridBagConstraints.anchor = GridBagConstraints::BASELINE;
    optionsPanelLayout->addWidget(sideBallastColorButton, gridBagConstraints);

    tieLengthLabel->setText(tr("Tie Length"));
    tieLengthLabel->setToolTip(tr("Use the spinner to the right to set the length of the ties"));
    gridBagConstraints = GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 18;
    gridBagConstraints.fill = GridBagConstraints::HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints::BASELINE_LEADING;
    optionsPanelLayout->addWidget(tieLengthLabel, gridBagConstraints);

    //mainTieLengthSpinner.setModel(new SpinnerNumberModel(0, 0, null, 1));
    mainTieLengthSpinner->setMinimum(0);
//    mainTieLengthSpinner->setMaximum(0);
    mainTieLengthSpinner->setSingleStep(1);
    mainTieLengthSpinner->setToolTip(tr("MainTieLengthToolTip"));
    mainTieLengthSpinner->setValue(ltdOptions->getMainTieLength());
//    mainTieLengthSpinner.addChangeListener(new event.ChangeListener() {
//        /*public*/ void stateChanged(event.ChangeEvent evt) {
//            mainTieLengthSpinnerStateChanged(evt);
//        }
//    });
    connect(mainTieLengthSpinner, SIGNAL(valueChanged(int)), this, SLOT(mainTieLengthSpinnerStateChanged(int)));
    gridBagConstraints = GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 18;
    gridBagConstraints.fill = GridBagConstraints::HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints::BASELINE;
    optionsPanelLayout->addWidget(mainTieLengthSpinner, gridBagConstraints);

    //sideTieLengthSpinner.setModel(new SpinnerNumberModel(0, 0, null, 1));
    sideTieLengthSpinner->setMinimum(0);
//    sideTieLengthSpinner->setMaximum(0);
    sideTieLengthSpinner->setSingleStep(1);
    sideTieLengthSpinner->setToolTip(tr("Click this button to set the length of sideline ties"));
    sideTieLengthSpinner->setValue(ltdOptions->getSideTieLength());
//    sideTieLengthSpinner.addChangeListener(new event.ChangeListener() {
//        /*public*/ void stateChanged(event.ChangeEvent evt) {
//            sideTieLengthSpinnerStateChanged(evt);
//        }
//    });
    connect(sideTieLengthSpinner, SIGNAL(valueChanged(int)), this, SLOT(sideTieLengthSpinnerStateChanged(int)));
    gridBagConstraints = GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.gridy = 18;
    gridBagConstraints.fill = GridBagConstraints::HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints::BASELINE;
    optionsPanelLayout->addWidget(sideTieLengthSpinner, gridBagConstraints);

    tieWidthLabel->setText(tr("Tie Width"));
    tieWidthLabel->setToolTip(tr("Use the spinner to the right to set the width of the ties"));
    gridBagConstraints = GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 20;
    gridBagConstraints.fill = GridBagConstraints::HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints::BASELINE_LEADING;
    optionsPanelLayout->addWidget(tieWidthLabel, gridBagConstraints);

    //mainTieWidthSpinner.setModel(new SpinnerNumberModel(0, 0, null, 1));
    mainTieWidthSpinner->setMinimum(0);
//    mainTieWidthSpinner->setMaximum(0);
    mainTieWidthSpinner->setSingleStep(1);
    mainTieWidthSpinner->setToolTip(tr("Click this button to set the width of mainline ties"));
    mainTieWidthSpinner->setEnabled(ltdOptions->getMainTieLength() > 0);
    mainTieWidthSpinner->setValue(ltdOptions->getMainTieWidth());
//    mainTieWidthSpinner.addChangeListener(new event.ChangeListener() {
//        /*public*/ void stateChanged(event.ChangeEvent evt) {
//            mainTieWidthSpinnerStateChanged(evt);
//        }
//    });
    connect(mainTieWidthSpinner, SIGNAL(valueChanged(int)), this, SLOT(mainTieWidthSpinnerStateChanged(int)));
    gridBagConstraints = GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 20;
    gridBagConstraints.fill = GridBagConstraints::HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints::BASELINE;
    optionsPanelLayout->addWidget(mainTieWidthSpinner, gridBagConstraints);

    //sideTieWidthSpinner.setModel(new SpinnerNumberModel(0, 0, null, 1));
    sideTieWidthSpinner->setMinimum(0);
//    sideTieWidthSpinner->setMaximum(0);
    sideTieWidthSpinner->setSingleStep(1);
    sideTieWidthSpinner->setToolTip(tr("Click this button to set the width of sideline ties"));
    sideTieWidthSpinner->setEnabled(ltdOptions->getSideTieLength() > 0);
    sideTieWidthSpinner->setValue(ltdOptions->getSideTieWidth());
//    sideTieWidthSpinner.addChangeListener(new event.ChangeListener() {
//        /*public*/ void stateChanged(event.ChangeEvent evt) {
//            sideTieWidthSpinnerStateChanged(evt);
//        }
//    });
    connect(sideTieWidthSpinner, SIGNAL(valueChanged(int)), this, SLOT(sideTieWidthSpinnerStateChanged(int)));
    gridBagConstraints = GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.gridy = 20;
    gridBagConstraints.fill = GridBagConstraints::HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints::BASELINE;
    optionsPanelLayout->addWidget(sideTieWidthSpinner, gridBagConstraints);

    tieGapLabel->setText(tr("Tie Gap"));
    tieGapLabel->setToolTip(tr("Use the spinner to the right to set the distance between the ties"));
    gridBagConstraints = GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 22;
    gridBagConstraints.fill = GridBagConstraints::HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints::BASELINE_LEADING;
    optionsPanelLayout->addWidget(tieGapLabel, gridBagConstraints);

    //mainTieGapSpinner.setModel(new SpinnerNumberModel(0, 0, null, 1));
    mainTieGapSpinner->setMinimum(0);
//    mainTieGapSpinner->setMaximum(0);
    mainTieGapSpinner->setSingleStep(1);
    mainTieGapSpinner->setToolTip(tr("MainTieGapToolTip"));
    mainTieGapSpinner->setEnabled(ltdOptions->getMainTieLength() > 0);
    mainTieGapSpinner->setValue(ltdOptions->getMainTieGap());
//    mainTieGapSpinner.addChangeListener(new event.ChangeListener() {
//        /*public*/ void stateChanged(event.ChangeEvent evt) {
//            mainTieGapSpinnerStateChanged(evt);
//        }
//    });
    connect(mainTieGapSpinner, SIGNAL(valueChanged(int)), this, SLOT(mainTieGapSpinnerStateChanged(int)));
    gridBagConstraints = GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 22;
    gridBagConstraints.fill = GridBagConstraints::HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints::BASELINE;
    optionsPanelLayout->addWidget(mainTieGapSpinner, gridBagConstraints);

    //sideTieGapSpinner.setModel(new SpinnerNumberModel(0, 0, null, 1));
    sideTieGapSpinner->setMinimum(0);
//    sideTieGapSpinner->setMaximum(0);
    sideTieGapSpinner->setSingleStep(1);
    sideTieGapSpinner->setToolTip(tr("SideTieGapToolTip"));
    sideTieGapSpinner->setEnabled(ltdOptions->getSideTieLength() > 0);
    sideTieGapSpinner->setValue(ltdOptions->getSideTieGap());
//    sideTieGapSpinner.addChangeListener(new event.ChangeListener() {
//        /*public*/ void stateChanged(event.ChangeEvent evt) {
//            sideTieGapSpinnerStateChanged(evt);
//        }
//    });
    connect(sideTieGapSpinner, SIGNAL(valueChanged(int)), this, SLOT(sideTieGapSpinnerStateChanged(int)));
    gridBagConstraints = GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.gridy = 22;
    gridBagConstraints.fill = GridBagConstraints::HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints::BASELINE;
    optionsPanelLayout->addWidget(sideTieGapSpinner, gridBagConstraints);

    tieColorLabel->setText(tr("Tie Color"));
    tieColorLabel->setToolTip(tr("Use the buttons to the right to set the color of the ties"));
    gridBagConstraints = GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 24;
    gridBagConstraints.fill = GridBagConstraints::HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints::BASELINE_LEADING;
    optionsPanelLayout->addWidget(tieColorLabel, gridBagConstraints);

    //mainTieColorButton.setBackground(ltdOptions->getMainTieColor());
    mainTieColorButton->setIcon(layoutEditor->getColourIcon(ltdOptions->getMainTieColor()));
    mainTieColorButton->setToolTip(tr("Click this button to set the color of mainline ties"));
//    mainTieColorButton.setBorder(BorderFactory.createBevelBorder(border.BevelBorder.LOWERED));
    mainTieColorButton->setEnabled(ltdOptions->getMainTieLength() > 0);
//    mainTieColorButton.setOpaque(true);
//    mainTieColorButton.addActionListener(new event.ActionListener() {
//        /*public*/ void actionPerformed(event.ActionEvent evt) {
//            mainTieColorButtonActionPerformed(evt);
//        }
//    });
    connect(mainTieColorButton, SIGNAL(clicked(bool)), this, SLOT(mainTieColorButtonActionPerformed()));

//    GroupLayout mainTieColorButtonLayout = new GroupLayout(mainTieColorButton);
//    mainTieColorButton.setLayout(mainTieColorButtonLayout);
//    mainTieColorButtonLayout.setHorizontalGroup(
//        mainTieColorButtonLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
//        .addGap(0, 0, Short.MAX_VALUE)
//    );
//    mainTieColorButtonLayout.setVerticalGroup(
//        mainTieColorButtonLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
//        .addGap(0, 0, Short.MAX_VALUE)
//    );

    gridBagConstraints = GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 24;
    gridBagConstraints.fill = GridBagConstraints::BOTH;
    gridBagConstraints.anchor = GridBagConstraints::BASELINE;
    optionsPanelLayout->addWidget(mainTieColorButton, gridBagConstraints);

    //sideTieColorButton.setBackground(ltdOptions->getSideTieColor());
    sideTieColorButton->setIcon(layoutEditor->getColourIcon(ltdOptions->getSideTieColor()));
    sideTieColorButton->setToolTip(tr("Click this button to set the color of sideline ties"));
//    sideTieColorButton.setBorder(BorderFactory.createBevelBorder(border.BevelBorder.LOWERED));
    sideTieColorButton->setEnabled(ltdOptions->getSideTieLength() > 0);
//    sideTieColorButton.setOpaque(true);
//    sideTieColorButton.addActionListener(new event.ActionListener() {
//        /*public*/ void actionPerformed(event.ActionEvent evt) {
//            sideTieColorButtonActionPerformed(evt);
//        }
//    });
    connect(sideTieColorButton, SIGNAL(clicked(bool)), this, SLOT(sideTieColorButtonActionPerformed()));

//    GroupLayout sideTieColorButtonLayout = new GroupLayout(sideTieColorButton);
//    sideTieColorButton.setLayout(sideTieColorButtonLayout);
//    sideTieColorButtonLayout.setHorizontalGroup(
//        sideTieColorButtonLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
//        .addGap(0, 0, Short.MAX_VALUE)
//    );
//    sideTieColorButtonLayout.setVerticalGroup(
//        sideTieColorButtonLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
//        .addGap(0, 0, Short.MAX_VALUE)
//    );
    gridBagConstraints = GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.gridy = 24;
    gridBagConstraints.fill = GridBagConstraints::BOTH;
    gridBagConstraints.anchor = GridBagConstraints::BASELINE;
    optionsPanelLayout->addWidget(sideTieColorButton, gridBagConstraints);

    //sidelineLabel.setFont(sidelineLabel.getFont().deriveFont(sidelineLabel.getFont().getStyle() | Font.BOLD));
    f = sidelineLabel->font();
    f.setBold(true);
    sidelineLabel->setFont(f);
    sidelineLabel->setText(tr("Sideline"));
    sidelineLabel->setToolTip(tr("This column is for sideline options"));
    gridBagConstraints = GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = GridBagConstraints::HORIZONTAL;
    gridBagConstraints.weightx = 30.0;
    optionsPanelLayout->addWidget(sidelineLabel, gridBagConstraints);

    blockLineDashPercentageX10Label->setText(tr("Block Line Dash Percentage (x10)"));
    blockLineDashPercentageX10Label->setToolTip(tr("Use the spinner to the right to set the dash percentage (times ten) of the block line"));
    gridBagConstraints = GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 12;
    gridBagConstraints.fill = GridBagConstraints::HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints::BASELINE_LEADING;
    optionsPanelLayout->addWidget(blockLineDashPercentageX10Label, gridBagConstraints);

    //mainBlockLineDashPercentageX10Spinner.setModel(new SpinnerNumberModel(1, 0, 9, 1));
    mainBlockLineDashPercentageX10Spinner->setValue(1);
    mainBlockLineDashPercentageX10Spinner->setMinimum(0);
    mainBlockLineDashPercentageX10Spinner->setMaximum(9);
    mainBlockLineDashPercentageX10Spinner->setSingleStep(1);
    mainBlockLineDashPercentageX10Spinner->setToolTip(tr("Click this button to set the width of mainline block lines"));
    mainBlockLineDashPercentageX10Spinner->setEnabled(ltdOptions->getMainBlockLineWidth() > 0);
//    mainBlockLineDashPercentageX10Spinner->setName(""); // NOI18N
    mainBlockLineDashPercentageX10Spinner->setValue(ltdOptions->getMainBlockLineDashPercentageX10());
//    mainBlockLineDashPercentageX10Spinner.addChangeListener(new event.ChangeListener() {
//        /*public*/ void stateChanged(event.ChangeEvent evt) {
//            mainBlockLineDashPercentageX10SpinnerStateChanged(evt);
//        }
//    });
    connect(mainBlockLineDashPercentageX10Spinner, SIGNAL(valueChanged(int)), this, SLOT(mainBlockLineDashPercentageX10SpinnerStateChanged(int)));
    gridBagConstraints = GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 12;
    gridBagConstraints.fill = GridBagConstraints::HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints::BASELINE;
    optionsPanelLayout->addWidget(mainBlockLineDashPercentageX10Spinner, gridBagConstraints);

    //sideBlockLineDashPercentageX10Spinner.setModel(new SpinnerNumberModel(1, 0, 9, 1));
    sideBlockLineDashPercentageX10Spinner->setValue(1);
    sideBlockLineDashPercentageX10Spinner->setMinimum(0);
    sideBlockLineDashPercentageX10Spinner->setMaximum(9);
    sideBlockLineDashPercentageX10Spinner->setSingleStep(1);
    sideBlockLineDashPercentageX10Spinner->setToolTip(tr("Click this button to set the sideline block lines dash percentage (times ten)"));
    sideBlockLineDashPercentageX10Spinner->setEnabled(ltdOptions->getSideBlockLineWidth() > 0);
//    sideBlockLineDashPercentageX10Spinner->setName(""); // NOI18N
    sideBlockLineDashPercentageX10Spinner->setValue(ltdOptions->getSideBlockLineDashPercentageX10());
//    sideBlockLineDashPercentageX10Spinner.addChangeListener(new event.ChangeListener() {
//        /*public*/ void stateChanged(event.ChangeEvent evt) {
//            sideBlockLineDashPercentageX10SpinnerStateChanged(evt);
//        }
//    });
    connect(sideBlockLineDashPercentageX10Spinner, SIGNAL(valueChanged(int)), this, SLOT(sideBlockLineDashPercentageX10SpinnerStateChanged(int)));
    gridBagConstraints = GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.gridy = 12;
    gridBagConstraints.fill = GridBagConstraints::HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints::BASELINE;
    optionsPanelLayout->addWidget(sideBlockLineDashPercentageX10Spinner, gridBagConstraints);

    presetsLabel->setText("Presets:");

    //presetsComboBox.setModel(new DefaultComboBoxModel<>(new String[] { "Classic JMRI", "Drafting", "Realistic", "Realistic Oh!", "Garrish", "--", "Custom" }));
    presetsComboBox->addItems(QStringList() <<"Classic JMRI"<< "Drafting"<< "Realistic"<< "Realistic Oh!"<< "Garrish"<< "--"<< "Custom" );
//    presetsComboBox.addActionListener(new event.ActionListener() {
//        /*public*/ void actionPerformed(event.ActionEvent evt) {
//            presetsComboBoxActionPerformed(evt);
//        }
//    });
    connect(presetsComboBox, SIGNAL(currentTextChanged(QString)), this, SLOT(presetsComboBoxActionPerformed(QString)));

    applyButton->setText("Apply");
//    applyButton.addActionListener(new event.ActionListener() {
//        /*public*/ void actionPerformed(event.ActionEvent evt) {
//            applyButtonActionPerformed(evt);
//        }
//    });
    connect(applyButton, SIGNAL(clicked()), this, SLOT(applyButtonActionPerformed()));

    cancelButton->setText("Cancel");
//    cancelButton.setActionCommand("cancelActionCommand");
//    cancelButton.addActionListener(new event.ActionListener() {
//        /*public*/ void actionPerformed(event.ActionEvent evt) {
//            cancelButtonActionPerformed(evt);
//        }
//    });
    connect(cancelButton, SIGNAL(clicked(bool)), this, SLOT(cancelButtonActionPerformed()));

    okButton->setText("Ok");
//    okButton.addActionListener(new event.ActionListener() {
//        /*public*/ void actionPerformed(event.ActionEvent evt) {
//            okButtonActionPerformed(evt);
//        }
//    });
    connect(okButton, SIGNAL(clicked(bool)), this, SLOT(okButtonActionPerformed()));
#if 0
    GroupLayout QWidgetButtonsLayout = new GroupLayout(QWidgetButtons);
    QWidgetButtons.setLayout(QWidgetButtonsLayout);
    QWidgetButtonsLayout.setHorizontalGroup(
        QWidgetButtonsLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
        .addGroup(QWidgetButtonsLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(presetsLabel)
            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(presetsComboBox, GroupLayout.PREFERRED_SIZE, 200, GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 285, Short.MAX_VALUE)
            .addComponent(applyButton)
            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(cancelButton)
            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(okButton)
            .addContainerGap())
    );

    QWidgetButtonsLayout.linkSize(SwingConstants.HORIZONTAL, new Component[] {applyButton, cancelButton, okButton});

    QWidgetButtonsLayout.setVerticalGroup(
        QWidgetButtonsLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
        .addGroup(QWidgetButtonsLayout.createSequentialGroup()
            .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(QWidgetButtonsLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                .addComponent(presetsComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addComponent(presetsLabel)
                .addComponent(applyButton)
                .addComponent(cancelButton)
                .addComponent(okButton))
            .addContainerGap())
    );

    GroupLayout layout = new GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(GroupLayout.Alignment.LEADING)
        .addComponent(optionsPanel, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 722, Short.MAX_VALUE)
        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(QWidgetButtons, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addComponent(optionsPanel, GroupLayout.PREFERRED_SIZE, 532, GroupLayout.PREFERRED_SIZE)
            .addGap(0, 68, Short.MAX_VALUE))
        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 542, Short.MAX_VALUE)
                .addComponent(QWidgetButtons, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
    );
#endif
    getContentPane()->layout()->addWidget(optionsPanel);
    QWidget* buttons = new QWidget();
    buttons->setLayout(new FlowLayout());
    buttons->layout()->addWidget(presetsComboBox);
    buttons->layout()->addWidget(presetsLabel);
    buttons->layout()->addWidget(applyButton);
    buttons->layout()->addWidget(okButton);
    buttons->layout()->addWidget(cancelButton);
    getContentPane()->layout()->addWidget(buttons);
    pack();
}// </editor-fold>

/*==========================*\
|* action performed methods *|
\*==========================*/

/*private*/ void LayoutTrackDrawingOptionsDialog::okButtonActionPerformed(/*ActionEvent evt*/) {
    log->debug("okButtonActionPerformed");
    ltdOptions->setName(layoutEditor->getLayoutName());
    layoutEditor->setLayoutTrackDrawingOptions(ltdOptions);
    ltdOptions = nullptr;
    setVisible(false);
    dispose();
}

/*private*/ void LayoutTrackDrawingOptionsDialog::presetsComboBoxActionPerformed(QString) {
    log->debug(tr("presetsComboBoxActionPerformed"));
//    int modifiers = evt.getModifiers();
//    if (modifiers != 0) {   // don't do this unless it's a mouse click
        QString presetName = (QString) presetsComboBox->currentText();
        for (LayoutTrackDrawingOptions* ltdo : ltdoList) {
            if (ltdo->getName()==(presetName)) {
                if (ltdOptions->getName()!=(ltdo->getName())) {
                    ltdOptions = ltdo;
                    setupControls();
//                    optionsPanel.setBorder(BorderFactory.createTitledBorder(presetName));
                    optionsPanel->setTitle(presetName);
                    presetsComboBox->setCurrentText(presetName);
                }
                break;
            }
        }
//    }
}

/*private*/ void LayoutTrackDrawingOptionsDialog::cancelButtonActionPerformed(/*ActionEvent evt*/) {
    log->debug(tr("cancelButtonActionPerformed"));
    // restore orginal settings
    layoutEditor->setLayoutTrackDrawingOptions(leLTDOptions);
    setVisible(false);
    dispose();
}

/*private*/ void LayoutTrackDrawingOptionsDialog::sideTieGapSpinnerStateChanged(int value) {
//    QSpinBox* spinner* = (QSpinBox) evt.getSource();
//    Integer value = (Integer) spinner.getValue();
    makeCustomPreset();
    ltdOptions->setSideTieGap(value);
    log->debug(tr("sideTieGapSpinnerStateChanged(%1)").arg(value));
}

/*private*/ void LayoutTrackDrawingOptionsDialog::mainTieGapSpinnerStateChanged(int value ) {
//    QSpinBox* QSpinBox* = (QSpinBox) evt.getSource();
//    Integer value = (Integer) spinner.getValue();
    makeCustomPreset();
    ltdOptions->setMainTieGap(value);
    log->debug(tr("mainTieGapSpinnerStateChanged(%1)").arg(value));
}

/*private*/ void LayoutTrackDrawingOptionsDialog::sideTieWidthSpinnerStateChanged(int value) {
//    QSpinBox* QSpinBox* = (JSpinner) evt.getSource();
//    Integer value = (Integer) spinner.getValue();
    makeCustomPreset();
    ltdOptions->setSideTieWidth(value);
    log->debug(tr("sideTieWidthSpinnerStateChanged(%1)").arg(value));
}

/*private*/ void LayoutTrackDrawingOptionsDialog::mainTieWidthSpinnerStateChanged(int value) {
//    QSpinBox* QSpinBox* = (JSpinner) evt.getSource();
//    Integer value = (Integer) spinner.getValue();
    makeCustomPreset();
    ltdOptions->setMainTieWidth(value);
    log->debug(tr("mainTieWidthSpinnerStateChanged(%1)").arg(value));
}

/*private*/ void LayoutTrackDrawingOptionsDialog::sideTieLengthSpinnerStateChanged(int value) {
//    QSpinBox* QSpinBox* = (JSpinner) evt.getSource();
//    Integer value = (Integer) spinner.getValue();
    makeCustomPreset();
    ltdOptions->setSideTieLength(value);
    log->debug(tr("sideTieLengthSpinnerStateChanged(%1)").arg(value));
    sideTieColorButton->setEnabled(value > 0);
    sideTieGapSpinner->setEnabled(value > 0);
    sideTieWidthSpinner->setEnabled(value > 0);
}

/*private*/ void LayoutTrackDrawingOptionsDialog::mainTieLengthSpinnerStateChanged(int value) {
//    QSpinBox* QSpinBox* = (JSpinner) evt.getSource();
//    Integer value = (Integer) spinner.getValue();
    makeCustomPreset();
    ltdOptions->setMainTieLength(value);
    log->debug(tr("mainTieLengthSpinnerStateChanged(%1)").arg(value));
    mainTieColorButton->setEnabled(value > 0);
    mainTieGapSpinner->setEnabled(value > 0);
    mainTieWidthSpinner->setEnabled(value > 0);
}

/*private*/ void LayoutTrackDrawingOptionsDialog::sideBallastWidthSpinnerStateChanged(int value) {
//    QSpinBox* QSpinBox* = (JSpinner) evt.getSource();
//    Integer value = (Integer) spinner.getValue();
    makeCustomPreset();
    ltdOptions->setSideBallastWidth(value);
    log->debug(tr("sideBallastWidthSpinnerStateChanged(%1)").arg(value));
}

/*private*/ void LayoutTrackDrawingOptionsDialog::mainBallastWidthSpinnerStateChanged(int value) {
//    QSpinBox* QSpinBox* = (JSpinner) evt.getSource();
//    Integer value = (Integer) spinner.getValue();
    makeCustomPreset();
    ltdOptions->setMainBallastWidth(value);
    log->debug(tr("mainBallastWidthSpinnerStateChanged(%1)").arg(value));
}

/*private*/ void LayoutTrackDrawingOptionsDialog::sideBlockLineWidthSpinnerStateChanged(int value) {
//    QSpinBox* QSpinBox* = (JSpinner) evt.getSource();
//    Integer value = (Integer) spinner.getValue();
    makeCustomPreset();
    ltdOptions->setSideBlockLineWidth(value);
    log->debug(tr("sideBlockLineWidthSpinnerStateChanged(%1)").arg(value));
    sideBlockLineDashPercentageX10Spinner->setEnabled(value > 0);
}

/*private*/ void LayoutTrackDrawingOptionsDialog::mainBlockLineWidthSpinnerStateChanged(int value) {
//    QSpinBox* QSpinBox* = (JSpinner) evt.getSource();
//    Integer value = (Integer) spinner.getValue();
    makeCustomPreset();
    ltdOptions->setMainBlockLineWidth(value);
    log->debug(tr("mainBlockLineWidthSpinnerStateChanged(%1)").arg(value));
    mainBlockLineDashPercentageX10Spinner->setEnabled(value > 0);
}

/*private*/ void LayoutTrackDrawingOptionsDialog::mainRailGapSpinnerStateChanged(int value) {
//    QSpinBox* QSpinBox* = (JSpinner) evt.getSource();
//    Integer value = (Integer) spinner.getValue();
    makeCustomPreset();
    ltdOptions->setMainRailGap(value);
    log->debug(tr("sideRailGapSpinnerStateChanged(%1)").arg(value));
}

/*private*/ void LayoutTrackDrawingOptionsDialog::sideRailGapSpinnerStateChanged(int value) {
//    QSpinBox* QSpinBox* = (JSpinner) evt.getSource();
//    Integer value = (Integer) spinner.getValue();
    makeCustomPreset();
    ltdOptions->setSideRailGap(value);
    log->debug(tr("mainRailGapSpinnerStateChanged(%1)").arg(value));
}

/*private*/ void LayoutTrackDrawingOptionsDialog::sideRailWidthSpinnerStateChanged(int value) {
//    QSpinBox* QSpinBox* = (JSpinner) evt.getSource();
//    Integer value = (Integer) spinner.getValue();
    makeCustomPreset();
    ltdOptions->setSideRailWidth(value);
    log->debug(tr("sideRailWidthSpinnerStateChanged(%1)").arg(value));
}

/*private*/ void LayoutTrackDrawingOptionsDialog::mainRailWidthSpinnerStateChanged(int value) {
//    QSpinBox* QSpinBox* = (JSpinner) evt.getSource();
//    Integer value = (Integer) spinner.getValue();
    makeCustomPreset();
    ltdOptions->setMainRailWidth(value);
    log->debug(tr("mainRailWidthSpinnerStateChanged(%1)").arg(value));
}

/*private*/ void LayoutTrackDrawingOptionsDialog::sideRailCountSpinnerStateChanged(int value) {
    ltdOptions->setSideRailCount(value);
    log->debug(tr("sideRailCountSpinnerStateChanged(%1)").arg(value));
    sideRailColorButton->setEnabled(value > 0);
    sideRailGapSpinner->setEnabled(value > 1);
    sideRailWidthSpinner->setEnabled(value > 0);
}

/*private*/ void LayoutTrackDrawingOptionsDialog::mainRailCountSpinnerStateChanged(int value) {
    makeCustomPreset();
    ltdOptions->setMainRailCount(value);
    log->debug(tr("mainRailCountSpinnerStateChanged(%1)").arg(value));
    mainRailColorButton->setEnabled(value > 0);
    mainRailGapSpinner->setEnabled(value > 1);
    mainRailWidthSpinner->setEnabled(value > 0);
}

/*private*/ void LayoutTrackDrawingOptionsDialog::applyButtonActionPerformed(/*ActionEvent evt*/) {
    LayoutTrackDrawingOptions* ltdo = new LayoutTrackDrawingOptions(ltdOptions);
    ltdo->setName(layoutEditor->getLayoutName());
    layoutEditor->setLayoutTrackDrawingOptions(ltdo);
}

/*private*/ void LayoutTrackDrawingOptionsDialog::mainRailColorButtonActionPerformed(/*ActionEvent evt*/) {
//    QPushButton* button = (QPushButton) evt.getSource();
 QColor value = Qt::gray;//button.getBackground();
 QColor newColor = JmriColorChooser::showDialog(nullptr, "Choose a color", value);
 if ((newColor.isValid()) && newColor!=(value)) {
        makeCustomPreset();
//        button.setBackground(newColor);
        ltdOptions->setMainRailColor(newColor);
        mainRailColorButton->setIcon(layoutEditor->getColourIcon(newColor));
    }
    log->info(tr("*mainRailColorButtonActionPerformed(%1)").arg(ColorUtil::colorToString(newColor)));
}

/*private*/ void LayoutTrackDrawingOptionsDialog::sideRailColorButtonActionPerformed(/*ActionEvent evt*/) {
//    QPushButton* button = (QPushButton) evt.getSource();
 QColor value = Qt::gray;//button.getBackground();
 QColor newColor = JmriColorChooser::showDialog(nullptr, "Choose a color", value);
 if ((newColor.isValid()) && newColor!=(value)) {
        makeCustomPreset();
//        button.setBackground(newColor);
        ltdOptions->setSideRailColor(newColor);
        sideRailColorButton->setIcon(layoutEditor->getColourIcon(newColor));
    }
    log->info(tr("*sideRailColorButtonActionPerformed(%1)").arg(ColorUtil::colorToString(newColor)));
}

/*private*/ void LayoutTrackDrawingOptionsDialog::mainBallastColorButtonActionPerformed(/*ActionEvent evt*/) {
//    QPushButton* button = (QPushButton) evt.getSource();
 QColor value = Qt::gray;//button.getBackground();
 QColor newColor = JmriColorChooser::showDialog(nullptr, "Choose a color", value);
 if ((newColor.isValid()) && newColor!=(value)) {
        makeCustomPreset();
//        button.setBackground(newColor);
        ltdOptions->setMainBallastColor(newColor);
        mainBallastColorButton->setIcon(layoutEditor->getColourIcon(newColor));
    }
    log->info(tr("*mainBallastColorButtonActionPerformed(%1)").arg(ColorUtil::colorToString(newColor)));
}

/*private*/ void LayoutTrackDrawingOptionsDialog::sideBallastColorButtonActionPerformed(/*ActionEvent evt*/) {
//    QPushButton* button = (QPushButton) evt.getSource();
 QColor value = Qt::gray;//button.getBackground();
 QColor newColor = JmriColorChooser::showDialog(nullptr, "Choose a color", value);
 if ((newColor.isValid()) && newColor!=(value)) {
        makeCustomPreset();
//        button.setBackground(newColor);
        ltdOptions->setSideBallastColor(newColor);
        sideBallastColorButton->setIcon(layoutEditor->getColourIcon(newColor));
    }
    log->info(tr("*sideBallastColorButtonActionPerformed(%1)").arg(ColorUtil::colorToString(newColor)));
}

/*private*/ void LayoutTrackDrawingOptionsDialog:: mainTieColorButtonActionPerformed(/*ActionEvent evt*/) {
//    QPushButton* button = (QPushButton) evt.getSource();
    QColor value = Qt::gray;//button.getBackground();
    QColor newColor = JmriColorChooser::showDialog(nullptr, "Choose a color", value);
    if ((newColor.isValid()) && newColor!=(value)) {
        makeCustomPreset();
//        button.setBackground(newColor);
        ltdOptions->setMainTieColor(newColor);
        mainTieColorButton->setIcon(layoutEditor->getColourIcon(newColor));
    }
    log->info(tr("*mainTieColorButtonActionPerformed(%1)").arg(ColorUtil::colorToString(newColor)));
}

/*private*/ void LayoutTrackDrawingOptionsDialog::sideTieColorButtonActionPerformed(/*ActionEvent evt*/) {
//    QPushButton* button = (QPushButton) evt.getSource();
    QColor value = Qt::gray;//button.getBackground();
    QColor newColor = JmriColorChooser::showDialog(nullptr, "Choose a color", value);
    if ((newColor.isValid()) && newColor!=(value)) {
        makeCustomPreset();
//        button->setBackground(newColor);
        ltdOptions->setSideTieColor(newColor);
        sideTieColorButton->setIcon(layoutEditor->getColourIcon(newColor));
    }
    log->info(tr("*sideTieColorButtonActionPerformed(%1)").arg(ColorUtil::colorToString(newColor)));
}

/*private*/ void LayoutTrackDrawingOptionsDialog::mainBlockLineDashPercentageX10SpinnerStateChanged(int value) {
//    QSpinBox* QSpinBox* = (JSpinner) value.getSource();
//    Integer value = (Integer) spinner.getValue();
    makeCustomPreset();
    ltdOptions->setMainBlockLineDashPercentageX10(value);
    log->debug(tr("mainBlockLineDashPercentageX10SpinnerStateChanged(%1)").arg(value));
}

/*private*/ void LayoutTrackDrawingOptionsDialog::sideBlockLineDashPercentageX10SpinnerStateChanged(int value) {
//    QSpinBox* QSpinBox* = (JSpinner) evt.getSource();
//    Integer value = (Integer) spinner.getValue();
    makeCustomPreset();
    ltdOptions->setSideBlockLineDashPercentageX10(value);
    log->debug(tr("sideBlockLineDashPercentageX10(%1)").arg(value));
}

/*=========================*\
|* local (private) methods *|
\*=========================*/
/*private*/ void LayoutTrackDrawingOptionsDialog::setupControls() {
    copyToCustom = false;   // prevent xxx->setValue's from creating custom preset

//    mainBallastColorButton.setBackground(ltdOptions->getMainBallastColor());
    mainBallastWidthSpinner->setValue(ltdOptions->getMainBallastWidth());
    mainBlockLineDashPercentageX10Spinner->setValue(ltdOptions->getMainBlockLineDashPercentageX10());
    mainBlockLineWidthSpinner->setValue(ltdOptions->getMainBlockLineWidth());
//    mainRailColorButton.setBackground(ltdOptions->getMainRailColor());
    mainRailColorButton->setIcon(layoutEditor->getColourIcon(ltdOptions->getMainRailColor()));
    mainRailCountSpinner->setValue(ltdOptions->getMainRailCount());
    mainRailGapSpinner->setValue(ltdOptions->getMainRailGap());
    mainRailWidthSpinner->setValue(ltdOptions->getMainRailWidth());
//    mainTieColorButton.setBackground(ltdOptions->getMainTieColor());
    mainTieColorButton->setIcon(layoutEditor->getColourIcon(ltdOptions->getMainTieColor()));
    mainTieGapSpinner->setValue(ltdOptions->getMainTieGap());
    mainTieLengthSpinner->setValue(ltdOptions->getMainTieLength());
    mainTieWidthSpinner->setValue(ltdOptions->getMainTieWidth());
//    sideBallastColorButton.setBackground(ltdOptions->getSideBallastColor());
    sideBallastColorButton->setIcon(layoutEditor->getColourIcon(ltdOptions->getSideBallastColor()));
    sideBallastWidthSpinner->setValue(ltdOptions->getSideBallastWidth());
    sideBlockLineDashPercentageX10Spinner->setValue(ltdOptions->getSideBlockLineDashPercentageX10());
    sideBlockLineWidthSpinner->setValue(ltdOptions->getSideBlockLineWidth());
//    sideRailColorButton.setBackground(ltdOptions->getSideRailColor());
    sideRailColorButton->setIcon(layoutEditor->getColourIcon(ltdOptions->getSideRailColor()));
    sideRailCountSpinner->setValue(ltdOptions->getSideRailCount());
    sideRailGapSpinner->setValue(ltdOptions->getSideRailGap());
    sideRailWidthSpinner->setValue(ltdOptions->getSideRailWidth());
//    sideTieColorButton.setBackground(ltdOptions->getSideTieColor());
    sideTieColorButton->setIcon(layoutEditor->getColourIcon(ltdOptions->getSideTieColor()));
    sideTieGapSpinner->setValue(ltdOptions->getSideTieGap());
    sideTieLengthSpinner->setValue(ltdOptions->getSideTieLength());
    sideTieWidthSpinner->setValue(ltdOptions->getSideTieWidth());
    copyToCustom = true;
}   // setupControls


/*private*/ void LayoutTrackDrawingOptionsDialog::makeCustomPreset() {
    if (copyToCustom && ltdOptions->getName()!=(customPresetName)) {
        ltdOptions = new LayoutTrackDrawingOptions(ltdOptions);
        ltdOptions->setName(customPresetName);
        if (ltdoList.value(ltdoList.size() - 1)->getName()!=(customPresetName)) {
            ltdoList.append(ltdOptions);
            presetsComboBox->addItem(ltdOptions->getName());
        }
        presetsComboBox->setCurrentText(ltdOptions->getName());
        //optionsPanel.setBorder(BorderFactory.createTitledBorder(customPresetName));
  optionsPanel->setTitle(customPresetName);
    }
}
// define the presets

/*private*/ void LayoutTrackDrawingOptionsDialog::definePresets() {
    LayoutTrackDrawingOptions* tempLTDO = new LayoutTrackDrawingOptions(classicPresetName);
    tempLTDO->setMainBallastColor(Qt::black);
    tempLTDO->setMainBallastWidth(0);
    tempLTDO->setMainBlockLineDashPercentageX10(0);
    tempLTDO->setMainBlockLineWidth(4);
    tempLTDO->setMainRailColor(Qt::black);
    tempLTDO->setMainRailCount(1);
    tempLTDO->setMainRailGap(0);
    tempLTDO->setMainRailWidth(2);
    tempLTDO->setMainTieColor(Qt::black);
    tempLTDO->setMainTieGap(0);
    tempLTDO->setMainTieLength(0);
    tempLTDO->setMainTieWidth(0);
    tempLTDO->setSideBallastColor(Qt::black);
    tempLTDO->setSideBallastWidth(0);
    tempLTDO->setSideBlockLineDashPercentageX10(0);
    tempLTDO->setSideBlockLineWidth(2);
    tempLTDO->setSideRailColor(Qt::black);
    tempLTDO->setSideRailCount(1);
    tempLTDO->setSideRailGap(0);
    tempLTDO->setSideRailWidth(1);
    tempLTDO->setSideTieColor(Qt::black);
    tempLTDO->setSideTieGap(0);
    tempLTDO->setSideTieLength(0);
    tempLTDO->setSideTieWidth(0);
    ltdoList.append(tempLTDO);

    tempLTDO = new LayoutTrackDrawingOptions(draftingPresetName);
    tempLTDO->setMainBallastColor(Qt::black);
    tempLTDO->setMainBallastWidth(0);
    tempLTDO->setMainBlockLineDashPercentageX10(0);
    tempLTDO->setMainBlockLineWidth(4);
    tempLTDO->setMainRailColor(Qt::black);
    tempLTDO->setMainRailCount(2);
    tempLTDO->setMainRailGap(2);
    tempLTDO->setMainRailWidth(2);
    tempLTDO->setMainTieColor(Qt::black);
    tempLTDO->setMainTieGap(0);
    tempLTDO->setMainTieLength(0);
    tempLTDO->setMainTieWidth(0);
    tempLTDO->setSideBallastColor(Qt::black);
    tempLTDO->setSideBallastWidth(0);
    tempLTDO->setSideBlockLineDashPercentageX10(0);
    tempLTDO->setSideBlockLineWidth(4);
    tempLTDO->setSideRailColor(Qt::black);
    tempLTDO->setSideRailCount(2);
    tempLTDO->setSideRailGap(3);
    tempLTDO->setSideRailWidth(1);
    tempLTDO->setSideTieColor(Qt::black);
    tempLTDO->setSideTieGap(0);
    tempLTDO->setSideTieLength(0);
    tempLTDO->setSideTieWidth(0);
    ltdoList.append(tempLTDO);

    tempLTDO = new LayoutTrackDrawingOptions(realisticPresetName);
    tempLTDO->setMainBallastColor(QColor("#A0A0A0"));
    tempLTDO->setMainBallastWidth(13);
    tempLTDO->setMainBlockLineDashPercentageX10(0);
    tempLTDO->setMainBlockLineWidth(2);
    tempLTDO->setMainRailColor(QColor("#C0C0C0"));
    tempLTDO->setMainRailCount(2);
    tempLTDO->setMainRailGap(3);
    tempLTDO->setMainRailWidth(2);
    tempLTDO->setMainTieColor(QColor("#E0E0E0"));
    tempLTDO->setMainTieGap(7);
    tempLTDO->setMainTieLength(11);
    tempLTDO->setMainTieWidth(1);
    tempLTDO->setSideBallastColor(Qt::gray);
    tempLTDO->setSideBallastWidth(11);
    tempLTDO->setSideBlockLineDashPercentageX10(0);
    tempLTDO->setSideBlockLineWidth(2);
    tempLTDO->setSideRailColor(QColor("#D07060"));
    tempLTDO->setSideRailCount(2);
    tempLTDO->setSideRailGap(3);
    tempLTDO->setSideRailWidth(1);
    tempLTDO->setSideTieColor(QColor("#382018"));
    tempLTDO->setSideTieGap(6);
    tempLTDO->setSideTieLength(9);
    tempLTDO->setSideTieWidth(3);
    ltdoList.append(tempLTDO);

    tempLTDO = new LayoutTrackDrawingOptions(realisticOhPresetName);
    tempLTDO->setMainBallastColor(QColor("#A0A0A0"));
    tempLTDO->setMainBallastWidth(26);
    tempLTDO->setMainBlockLineDashPercentageX10(0);
    tempLTDO->setMainBlockLineWidth(4);
    tempLTDO->setMainRailColor(Qt::lightGray);
    tempLTDO->setMainRailCount(3);
    tempLTDO->setMainRailGap(6);
    tempLTDO->setMainRailWidth(2);
    tempLTDO->setMainTieColor(QColor("#E0E0E0"));
    tempLTDO->setMainTieGap(14);
    tempLTDO->setMainTieLength(22);
    tempLTDO->setMainTieWidth(2);
    tempLTDO->setSideBallastColor(Qt::gray);
    tempLTDO->setSideBallastWidth(22);
    tempLTDO->setSideBlockLineDashPercentageX10(0);
    tempLTDO->setSideBlockLineWidth(4);
    tempLTDO->setSideRailColor(QColor("#D07060"));
    tempLTDO->setSideRailCount(3);
    tempLTDO->setSideRailGap(6);
    tempLTDO->setSideRailWidth(2);
    tempLTDO->setSideTieColor(QColor("#382018"));
    tempLTDO->setSideTieGap(12);
    tempLTDO->setSideTieLength(18);
    tempLTDO->setSideTieWidth(6);
    ltdoList.append(tempLTDO);

    tempLTDO = new LayoutTrackDrawingOptions(british70sPresetName);
    tempLTDO->setMainBallastColor(Qt::black);
    tempLTDO->setMainBallastWidth(5);
    tempLTDO->setMainBlockLineDashPercentageX10(5);
    tempLTDO->setMainBlockLineWidth(4);
    tempLTDO->setMainRailColor(Qt::black);
    tempLTDO->setMainRailCount(0);
    tempLTDO->setMainRailGap(0);
    tempLTDO->setMainRailWidth(2);
    tempLTDO->setMainTieColor(Qt::black);
    tempLTDO->setMainTieGap(0);
    tempLTDO->setMainTieLength(0);
    tempLTDO->setMainTieWidth(0);
    tempLTDO->setSideBallastColor(Qt::black);
    tempLTDO->setSideBallastWidth(3);
    tempLTDO->setSideBlockLineDashPercentageX10(5);
    tempLTDO->setSideBlockLineWidth(2);
    tempLTDO->setSideRailColor(Qt::black);
    tempLTDO->setSideRailCount(0);
    tempLTDO->setSideRailGap(0);
    tempLTDO->setSideRailWidth(1);
    tempLTDO->setSideTieColor(Qt::black);
    tempLTDO->setSideTieGap(0);
    tempLTDO->setSideTieLength(0);
    tempLTDO->setSideTieWidth(0);
    ltdoList.append(tempLTDO);

    tempLTDO = new LayoutTrackDrawingOptions(csdazd71PresetName);
    tempLTDO->setMainBallastColor(QColor("#000000"));
    tempLTDO->setMainBallastWidth(0);
    tempLTDO->setMainBlockLineDashPercentageX10(8);
    tempLTDO->setMainBlockLineWidth(8);
    tempLTDO->setMainRailColor(QColor("#202020"));
    tempLTDO->setMainRailCount(1);
    tempLTDO->setMainRailGap(0);
    tempLTDO->setMainRailWidth(10);
    tempLTDO->setMainTieColor(QColor("#000000"));
    tempLTDO->setMainTieGap(0);
    tempLTDO->setMainTieLength(0);
    tempLTDO->setMainTieWidth(0);
    tempLTDO->setSideBallastColor(QColor("#000000"));
    tempLTDO->setSideBallastWidth(0);
    tempLTDO->setSideBlockLineDashPercentageX10(8);
    tempLTDO->setSideBlockLineWidth(8);
    tempLTDO->setSideRailColor(QColor("#202020"));
    tempLTDO->setSideRailCount(1);
    tempLTDO->setSideRailGap(0);
    tempLTDO->setSideRailWidth(10);
    tempLTDO->setSideTieColor(QColor("#000000"));
    tempLTDO->setSideTieGap(0);
    tempLTDO->setSideTieLength(0);
    tempLTDO->setSideTieWidth(0);
    ltdoList.append(tempLTDO);

    ltdoList.append(ltdOptions);

    presetsComboBox->clear();
//    ltdoList.forEach((ltdo) -> {
//        presetsComboBox.addItem(ltdo.getName());
//    });
    foreach(LayoutTrackDrawingOptions* ltdo, ltdoList)
     presetsComboBox->addItem(ltdo->getName());
    presetsComboBox->setCurrentText(ltdOptions->getName());
}   // definePresets



/*====================*\
|* initialize logging *|
\*====================*/
/*private*/ /*transient*/ /*final*/ /*static*/ Logger* LayoutTrackDrawingOptionsDialog::log
        = LoggerFactory::getLogger("LayoutTrackDrawingOptionsDialog");

