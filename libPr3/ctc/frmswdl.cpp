#include "frmswdl.h"
#include "commonsubs.h"
#include "codebuttonhandlerdataroutines.h"
/**
 *
 * @author Gregory J. Bedlek Copyright (C) 2018, 2019
 */
// /*public*/ class FrmSWDL extends JFrame {

/**
 * Creates new form DlgSWDL
 */
/*private*/ /*static*/ /*final*/ QString FrmSWDL::FORM_PROPERTIES = "DlgSWDL";    // NOI18N

/*public*/ FrmSWDL::FrmSWDL(AwtWindowProperties *awtWindowProperties, CodeButtonHandlerData* codeButtonHandlerData,
                ProgramProperties* programProperties, CheckJMRIObject* checkJMRIObject, QWidget* parent) : JFrame(parent){
    //super();
    initComponents();
    CommonSubs::addHelpMenu(this, "package.jmri.jmrit.ctc.CTC_frmSWDL", true);  // NOI18N
    _mAwtWindowProperties = awtWindowProperties;
    _mCodeButtonHandlerData = codeButtonHandlerData;
    _mProgramProperties = programProperties;
    CommonSubs::populateJComboBoxWithBeans(_mSWDL_InternalSensor, "Sensor", _mCodeButtonHandlerData->_mSWDL_InternalSensor->getHandleName(), false);   // NOI18N
    _mAwtWindowProperties->setWindowState(this, FORM_PROPERTIES);
    //this.getRootPane().setDefaultButton(_mSaveAndClose);
    _mSaveAndClose->setDefault(true);
}

/**
 * This method is called from within the constructor to initialize the form.
 * WARNING: Do NOT modify this code. The content of this method is always
 * regenerated by the Form Editor.
 */
// <editor-fold defaultstate="collapsed" desc="Generated Code">
/*private*/ void FrmSWDL::initComponents() {

    _mSaveAndClose = new JButton();
    _mSWDL_InternalSensorPrompt = new JLabel();
    jButton2 = new JButton();
    _mSWDL_InternalSensor = new JComboBox();

    setDefaultCloseOperation(JFrame::DO_NOTHING_ON_CLOSE);
    setTitle(tr("Edit switch direction lever"));
//    addWindowListener(new java.awt.event.WindowAdapter() {
//        @Override
//        /*public*/ void windowClosing(java.awt.event.WindowEvent evt) {
//            formWindowClosing(evt);
//        }
//    });
    addWindowListener(new FrmSWDL_windowListener(this));

    _mSaveAndClose->setText(tr("Save and Close"));
//    _mSaveAndClose.addActionListener(new java.awt.event.ActionListener() {
//        @Override
//        /*public*/ void actionPerformed(java.awt.event.ActionEvent evt) {
    connect(_mSaveAndClose, &JButton::clicked, [=]{
            _mSaveAndCloseActionPerformed(/*evt*/);
//        }
    });

    _mSWDL_InternalSensorPrompt->setHorizontalAlignment(/*SwingConstants.RIGHT*/Qt::AlignRight);
    _mSWDL_InternalSensorPrompt->setText(tr("Lever sensor:"));

    jButton2->setText(tr("Reapply patterns - this form ONLY!"));
//    jButton2.addActionListener(new java.awt.event.ActionListener() {
//        @Override
//        /*public*/ void actionPerformed(java.awt.event.ActionEvent evt) {
    connect(jButton2, &JButton::clicked, [=]{
            jButton2ActionPerformed(/*evt*/);
//        }
    });

    //_mSWDL_InternalSensor.setModel(new DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
    _mSWDL_InternalSensor->addItems({ "Item 1", "Item 2", "Item 3", "Item 4" });
#if 0
    GroupLayout layout = new GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(_mSWDL_InternalSensorPrompt, GroupLayout.PREFERRED_SIZE, 99, GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(_mSWDL_InternalSensor, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createSequentialGroup()
                    .addGap(106, 106, 106)
                    .addComponent(_mSaveAndClose))
                .addGroup(layout.createSequentialGroup()
                    .addGap(55, 55, 55)
                    .addComponent(jButton2)))
            .addContainerGap(99, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(GroupLayout.Alignment.LEADING)
        .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                .addComponent(_mSWDL_InternalSensorPrompt, GroupLayout.PREFERRED_SIZE, 12, GroupLayout.PREFERRED_SIZE)
                .addComponent(_mSWDL_InternalSensor, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addComponent(_mSaveAndClose)
            .addGap(37, 37, 37)
            .addComponent(jButton2)
            .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
#else
    JPanel* contentPane = new JPanel();
    QVBoxLayout* contentPaneLayout;
    contentPane->setLayout(contentPaneLayout = new QVBoxLayout());
    setCentralWidget(contentPane);

    JPanel* panel1 = new JPanel(new QHBoxLayout);
    ((QHBoxLayout*)panel1->layout())->addWidget(_mSWDL_InternalSensorPrompt, 0, Qt::AlignLeft);
    ((QHBoxLayout*)panel1->layout())->addWidget(_mSWDL_InternalSensor, 0, Qt::AlignLeft);
    contentPaneLayout->addWidget(panel1, 0, Qt::AlignHCenter);
    JPanel* panel2 = new JPanel(new QHBoxLayout);
    JPanel* panel2a = new JPanel(new FlowLayout);
    panel2a->layout()->addWidget(_mSaveAndClose);
    panel2a->layout()->addWidget(jButton2);
    panel2->layout()->addWidget(panel2a);
    contentPaneLayout->addWidget(panel2);
#endif
    pack();
}// </editor-fold>

/*private*/ void FrmSWDL::_mSaveAndCloseActionPerformed(/*java.awt.event.ActionEvent evt*/) {

    _mCodeButtonHandlerData->_mSWDL_InternalSensor = CommonSubs::getNBHSensor( _mSWDL_InternalSensor->getSelectedItem(), false);

    _mClosedNormally = true;
    _mAwtWindowProperties->saveWindowState(this, FORM_PROPERTIES);
    dispose();
}

/*private*/ void FrmSWDL::formWindowClosing(QCloseEvent* evt) {
    _mAwtWindowProperties->saveWindowState(this, FORM_PROPERTIES);
    dispose();
}

/*private*/ void FrmSWDL::jButton2ActionPerformed(/*java.awt.event.ActionEvent evt*/) {
    CodeButtonHandlerData* temp = _mCodeButtonHandlerData;
    temp = CodeButtonHandlerDataRoutines::uECBHDWSD_SWDL(_mProgramProperties, temp);
    CommonSubs::populateJComboBoxWithBeans(_mSWDL_InternalSensor, "Sensor", temp->_mSWDL_InternalSensor->getHandleName(), false);   // NOI18N
}

