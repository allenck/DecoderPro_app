#include "frmfleeting.h"
#include "commonsubs.h"

/**
 *
 * @author Gregory J. Bedlek Copyright (C) 2018, 2019
 */
// /*public*/ class FrmFleeting extends JFrame {

/**
 * Creates new form dlgProperties
 */
/*private*/ /*static*/ /*final*/ QString FrmFleeting::FORM_PROPERTIES = "DlgFleeting";    // NOI18N

/*private*/ void FrmFleeting::initOrig(OtherData* otherData) {
    _mFleetingToggleInternalSensorOrig = otherData->_mFleetingToggleInternalSensor->getHandleName();
    _mDefaultFleetingEnabledOrig = otherData->_mDefaultFleetingEnabled;
}
/*private*/ bool FrmFleeting::dataChanged() {
    if (_mFleetingToggleInternalSensorOrig != (_mFleetingToggleInternalSensor->text())) return true;
    if (_mDefaultFleetingEnabledOrig != _mDefaultFleetingEnabled->isChecked()) return true;
    return false;
}

/*public*/ FrmFleeting::FrmFleeting(AwtWindowProperties* awtWindowProperties, OtherData* otherData, QWidget* parent) : JFrame(parent){
    //super();
    initComponents();
    CommonSubs::addHelpMenu(this, "package.jmri.jmrit.ctc.CTC_menuCfgFlt", true);  // NOI18N
    _mAwtWindowProperties = awtWindowProperties;
    _mOtherData = otherData;
    _mFleetingToggleInternalSensor->setText(otherData->_mFleetingToggleInternalSensor->getHandleName());
    _mDefaultFleetingEnabled->setChecked(otherData->_mDefaultFleetingEnabled);
    initOrig(otherData);
    _mAwtWindowProperties->setWindowState(this, FORM_PROPERTIES);
    //this.getRootPane().setDefaultButton(_mSaveAndClose);
    _mSaveAndClose->setDefault(true);
}

/**
 * This method is called from within the constructor to initialize the form.
 * WARNING: Do NOT modify this code. The content of this method is always
 * regenerated by the Form Editor.
 */
// <editor-fold defaultstate="collapsed" desc="Generated Code">
/*private*/ void FrmFleeting::initComponents() {

    _mSaveAndClose = new JButton();
    _mFleetingToggleInternalSensor = new JTextField();
    jLabel21 = new JLabel();
    jLabel26 = new JLabel();
    _mDefaultFleetingEnabled = new JCheckBox();
    jLabel29 = new JLabel();

    setDefaultCloseOperation(JFrame::DO_NOTHING_ON_CLOSE);
    setTitle(tr("CTC Fleeting"));
//    addWindowListener(new java.awt.event.WindowAdapter() {
//        @Override
//        /*public*/ void windowClosing(java.awt.event.WindowEvent evt) {
//            formWindowClosing(evt);
//        }
//    });
    addWindowListener(new FrmFleeting_windowListener(this));

    _mSaveAndClose->setText(tr("Save andClose"));
//    _mSaveAndClose.addActionListener(new java.awt.event.ActionListener() {
//        @Override
//        /*public*/ void actionPerformed(/*java.awt.event.ActionEvent evt*/) {
    connect(_mSaveAndClose, &JButton::clicked, [=]{
            _mSaveAndCloseActionPerformed(/*evt*/);
//        }
    });

    jLabel21->setText(tr("(Actual) Fleeting toggle sensor:"));

    jLabel26->setText(tr("Fleeting information:"));

    _mDefaultFleetingEnabled->setText(" ");

    jLabel29->setText(tr("Fleeting enabled at start:"));
#if 0
    GroupLayout layout = new GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(45, 45, 45)
                    .addComponent(jLabel21))
                .addGroup(layout.createSequentialGroup()
                    .addGap(33, 33, 33)
                    .addComponent(jLabel26))
                .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel29)))
            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addComponent(_mDefaultFleetingEnabled)
                .addComponent(_mFleetingToggleInternalSensor, GroupLayout.PREFERRED_SIZE, 124, GroupLayout.PREFERRED_SIZE))
            .addGap(0, 179, Short.MAX_VALUE))
        .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(_mSaveAndClose)
            .addGap(142, 142, 142))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jLabel26)
            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                .addComponent(_mFleetingToggleInternalSensor, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel21))
            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                .addComponent(_mDefaultFleetingEnabled)
                .addComponent(jLabel29))
            .addGap(18, 18, 18)
            .addComponent(_mSaveAndClose)
            .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
#else
    JPanel* contentPane = new JPanel();
    QGridLayout* grid;
    contentPane->setLayout(grid = new QGridLayout());
    setCentralWidget(contentPane);
    grid->addWidget(jLabel26, 0, 0, 1, 2, Qt::AlignLeft);

    grid->addWidget(jLabel21, 2, 1, 1, 1, Qt::AlignRight);
    grid->addWidget(_mFleetingToggleInternalSensor, 2,2);

    grid->addWidget(jLabel29, 3,1,1, 1, Qt::AlignRight);
    grid->addWidget(_mDefaultFleetingEnabled, 3, 2);

    grid->addWidget(_mSaveAndClose, 5, 2);

#endif
    pack();
}// </editor-fold>

/*private*/ void FrmFleeting::formWindowClosing(QCloseEvent* evt) {
    _mAwtWindowProperties->saveWindowState(this, FORM_PROPERTIES);
    if (CommonSubs::allowClose(this, dataChanged())) dispose();
}

/*private*/ void FrmFleeting::_mSaveAndCloseActionPerformed(/*java.awt.event.ActionEvent evt*/) {
    if (dataChanged()) {

        NBHSensor* newSensor = CommonSubs::getNBHSensor(_mFleetingToggleInternalSensor->text(), true);
        if (newSensor != nullptr) _mOtherData->_mFleetingToggleInternalSensor = newSensor;

        _mOtherData->_mDefaultFleetingEnabled = _mDefaultFleetingEnabled->isChecked();
    }
    _mClosedNormally = true;
    _mAwtWindowProperties->saveWindowState(this, FORM_PROPERTIES);
    dispose();
}

