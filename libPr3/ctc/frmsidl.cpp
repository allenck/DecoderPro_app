#include "frmsidl.h"
#include "commonsubs.h"
#include "codebuttonhandlerdataroutines.h"

/**
 *
 * @author Gregory J. Bedlek Copyright (C) 2018, 2019
 */
///*public*/ class FrmSIDL extends JFrame {

/**
 * Creates new form DlgSIDL
 */
/*private*/ /*static*/ /*final*/ QString FrmSIDL::FORM_PROPERTIES = "DlgSIDL";    // NOI18N

/*public*/ FrmSIDL::FrmSIDL( AwtWindowProperties* awtWindowProperties, CodeButtonHandlerData* codeButtonHandlerData,
                ProgramProperties* programProperties, CheckJMRIObject* checkJMRIObject, QWidget* parent) : JFrame(parent){
    //super();
    initComponents();
    CommonSubs::addHelpMenu(this, "package.jmri.jmrit.ctc.CTC_frmSIDL", true);  // NOI18N
    _mAwtWindowProperties = awtWindowProperties;
    _mCodeButtonHandlerData = codeButtonHandlerData;
    _mProgramProperties = programProperties;
    CommonSubs::populateJComboBoxWithBeans(_mSIDL_LeftInternalSensor, "Sensor", _mCodeButtonHandlerData->_mSIDL_LeftInternalSensor->getHandleName(), false);   // NOI18N
    CommonSubs::populateJComboBoxWithBeans(_mSIDL_NormalInternalSensor, "Sensor", _mCodeButtonHandlerData->_mSIDL_NormalInternalSensor->getHandleName(), false);   // NOI18N
    CommonSubs::populateJComboBoxWithBeans(_mSIDL_RightInternalSensor, "Sensor", _mCodeButtonHandlerData->_mSIDL_RightInternalSensor->getHandleName(), false);   // NOI18N
    _mAwtWindowProperties->setWindowState(this, FORM_PROPERTIES);
    //this.getRootPane()->setDefaultButton(_mSaveAndClose);
    _mSaveAndClose->setDefault(true);
}

/**
 * This method is called from within the constructor to initialize the form.
 * WARNING: Do NOT modify this code. The content of this method is always
 * regenerated by the Form Editor.
 */
// <editor-fold defaultstate="collapsed" desc="Generated Code">
/*private*/ void FrmSIDL::initComponents() {

    _mSaveAndClose = new JButton();
    _mSIDL_LeftInternalSensorPrompt = new JLabel();
    _mSIDL_LeftInternalSensor = new JComboBox();
    _mSIDL_NormalInternalSensorPrompt = new JLabel();
    _mSIDL_NormalInternalSensor = new JComboBox();
    _mSIDL_RightInternalSensorPrompt = new JLabel();
    _mSIDL_RightInternalSensor = new JComboBox();
    jButton2 = new JButton();

    setDefaultCloseOperation(JFrame::DO_NOTHING_ON_CLOSE);
    setTitle(tr("Edit signal direction lever"));
//    addWindowListener(new java.awt.event.WindowAdapter() {
//        @Override
//        /*public*/ void windowClosing(java.awt.event.WindowEvent evt) {
//            formWindowClosing(evt);
//        }
//    });
    addWindowListener(new FrmSIDL_windowListener(this));

    _mSaveAndClose->setText(tr("Save andClose"));
//    _mSaveAndClose.addActionListener(new java.awt.event.ActionListener() {
//        @Override
//        /*public*/ void actionPerformed(/*java.awt.event.ActionEvent evt*/) {
    connect(_mSaveAndClose, &JButton::clicked, [=] {
            _mSaveAndCloseActionPerformed(/*evt*/);
//        }
    });

    _mSIDL_LeftInternalSensorPrompt->setHorizontalAlignment(/*SwingConstants.RIGHT*/Qt::AlignRight);
    _mSIDL_LeftInternalSensorPrompt->setText(tr("Left lever sensor:"));

    //_mSIDL_LeftInternalSensor->setModel(new DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
    _mSIDL_LeftInternalSensor->addItems({ "Item 1", "Item 2", "Item 3", "Item 4" });

    _mSIDL_NormalInternalSensorPrompt->setHorizontalAlignment(/*SwingConstants.RIGHT*/Qt::AlignRight);
    _mSIDL_NormalInternalSensorPrompt->setText(tr("Normal lever sensor:"));

    //_mSIDL_NormalInternalSensor->setModel(new DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
    _mSIDL_NormalInternalSensor->addItems({ "Item 1", "Item 2", "Item 3", "Item 4" });

    _mSIDL_RightInternalSensorPrompt->setHorizontalAlignment(/*SwingConstants.RIGHT*/Qt::AlignRight);
    _mSIDL_RightInternalSensorPrompt->setText(tr("Right lever sensor:"));

    //_mSIDL_RightInternalSensor->setModel(new DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
    _mSIDL_RightInternalSensor->addItems({ "Item 1", "Item 2", "Item 3", "Item 4" });

    jButton2->setText(tr("Reapply patterns - this form ONLY!"));
//    jButton2.addActionListener(new java.awt.event.ActionListener() {
//        /*public*/ void actionPerformed(/*java.awt.event.ActionEvent evt*/) {
    connect(jButton2, &JButton::clicked, [=]{
            jButton2ActionPerformed(/*evt*/);
//        }
    });
#if 0
    GroupLayout layout = new GroupLayout(getContentPane());
    getContentPane()->setLayout(layout);
    layout->setHorizontalGroup(
        layout.createParallelGroup(GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                        .addComponent(_mSIDL_RightInternalSensorPrompt, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                        .addComponent(_mSIDL_LeftInternalSensorPrompt, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 129, GroupLayout.PREFERRED_SIZE)
                        .addComponent(_mSIDL_NormalInternalSensorPrompt, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(_mSIDL_LeftInternalSensor, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addComponent(_mSIDL_NormalInternalSensor, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addComponent(_mSIDL_RightInternalSensor, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jButton2)
                    .addGap(28, 28, 28))))
        .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap(100, Short.MAX_VALUE)
            .addComponent(_mSaveAndClose)
            .addGap(72, 72, 72))
    );
    layout->setVerticalGroup(
        layout.createParallelGroup(GroupLayout.Alignment.LEADING)
        .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                .addComponent(_mSIDL_LeftInternalSensorPrompt)
                .addComponent(_mSIDL_LeftInternalSensor, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                .addComponent(_mSIDL_NormalInternalSensorPrompt)
                .addComponent(_mSIDL_NormalInternalSensor, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                .addComponent(_mSIDL_RightInternalSensorPrompt)
                .addComponent(_mSIDL_RightInternalSensor, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
            .addComponent(_mSaveAndClose)
            .addGap(18, 18, 18)
            .addComponent(jButton2)
            .addContainerGap())
    );
#else
    JPanel* contentPane = new JPanel();
    contentPane->setLayout(new QVBoxLayout());
    setCentralWidget(contentPane);

    JPanel* panel1 = new JPanel(new QHBoxLayout());
    ((QHBoxLayout*)panel1->layout())->addWidget(_mSIDL_LeftInternalSensorPrompt, 0, Qt::AlignRight);
    panel1->layout()->addWidget(_mSIDL_LeftInternalSensor);
    contentPane->layout()->addWidget(panel1);

    JPanel* panel2 = new JPanel(new QHBoxLayout());
    ((QHBoxLayout*)panel2->layout())->addWidget(_mSIDL_NormalInternalSensorPrompt, 0, Qt::AlignRight);
    panel1->layout()->addWidget(_mSIDL_NormalInternalSensor);
    contentPane->layout()->addWidget(panel2);

    JPanel* panel3 = new JPanel(new QHBoxLayout());
    ((QHBoxLayout*)panel3->layout())->addWidget(_mSIDL_RightInternalSensorPrompt, 0, Qt::AlignRight);
    panel1->layout()->addWidget(_mSIDL_RightInternalSensor);
    contentPane->layout()->addWidget(panel3);

    JPanel* panel4 = new JPanel(new FlowLayout());
    panel4->layout()->addWidget(_mSaveAndClose);
    panel4->layout()->addWidget(jButton2);
    contentPane->layout()->addWidget(panel4);
#endif
    pack();
}// </editor-fold>

/*private*/ void FrmSIDL::_mSaveAndCloseActionPerformed(/*java.awt.event.ActionEvent evt*/) {
    _mCodeButtonHandlerData->_mSIDL_LeftInternalSensor = CommonSubs::getNBHSensor( _mSIDL_LeftInternalSensor->getSelectedItem(), false);
    _mCodeButtonHandlerData->_mSIDL_NormalInternalSensor = CommonSubs::getNBHSensor( _mSIDL_NormalInternalSensor->getSelectedItem(), false);
    _mCodeButtonHandlerData->_mSIDL_RightInternalSensor = CommonSubs::getNBHSensor( _mSIDL_RightInternalSensor->getSelectedItem(), false);

    _mClosedNormally = true;
    _mAwtWindowProperties->saveWindowState(this, FORM_PROPERTIES);
    dispose();
}

/*private*/ void FrmSIDL::formWindowClosing(QCloseEvent* evt) {
    _mAwtWindowProperties->saveWindowState(this, FORM_PROPERTIES);
    dispose();
}

/*private*/ void FrmSIDL::jButton2ActionPerformed(/*java.awt.event.ActionEvent evt*/) {
    CodeButtonHandlerData* temp = _mCodeButtonHandlerData;
    temp = CodeButtonHandlerDataRoutines::uECBHDWSD_SIDL(_mProgramProperties, temp);
    CommonSubs::populateJComboBoxWithBeans(_mSIDL_LeftInternalSensor, "Sensor", temp->_mSIDL_LeftInternalSensor->getHandleName(), false);   // NOI18N
    CommonSubs::populateJComboBoxWithBeans(_mSIDL_NormalInternalSensor, "Sensor", temp->_mSIDL_NormalInternalSensor->getHandleName(), false);   // NOI18N
    CommonSubs::populateJComboBoxWithBeans(_mSIDL_RightInternalSensor, "Sensor", temp->_mSIDL_RightInternalSensor->getHandleName(), false);   // NOI18N
}

