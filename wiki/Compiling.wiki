<h1>Compiling JmriQt</h1>&nbsp;This port of the Java JMRI project is referred to here as JmroQt.&nbsp; Development&nbsp; has been done starting with QT 4.8.3 Current efforts have been using Qt Version 5.11.3.&nbsp; Qt is available for Linux, Windows, Mac
and other
systems. Qt can be downloaded from: [http://qt-project.org/downloads|Qt
downloads]. You will also need to download the QtCreator IDE program.
Recently, development has used Qt version 5.4 or higher. The recent
addition of the Web Server requires the later versions of Qt because of
support for WebSockets.&nbsp;
<p>The program requires the use of the
[http://qt-project.org/wiki/QtSerialPort | QtSerialPort] package which
is included in Qt 5.0+ but can be downloaded for use with QT 4.x
versions. Even though the QtSerialPort module is included with Qt 5.0,
it does not, when running on Linux, display
manufacturer or descriptive info. In order to display this info, it is
necessary to install the udevlib-dev packagage
([/doc/tip/DecoderPro_app/wiki/rfid.wiki |instructions]) and to
download the
current QtSerialPort source (as of August, 2013). As of November, 2013,
the QtSerialPort package included with Qt 5.0 provides the nececessary
support.</p>
<p>
The program consists of at least 13 sub-projects:
</p>
<ol>
  <li><strong>appslib </strong>This module contains base libraries for
the 3 apps that wil lbe built: DecoderPro3, <br>
    <strong></strong></li>
  <li><strong>AutoIncreaseBuildNr</strong> This is a little utility
program that is used to automatically increment the build number in a
c++ header file.</li>
  <li><b>DecoderPro3</b> This is one of the several executables
produced. It is oriented to working with Rosters, and working with
decoders. <br>
  </li>
  <li><b>libPr3</b> This project creates a library that contains
classes for accessing LocoNet messages and manages configuration data
for LocoIO modules. </li>
  <li><strong>ftdilib</strong> This project supports RFID readers that
can be obtained from [https://www.sparkfun.com/products/11839 | Spark
Fun Electronics]</li>
  <li><span style="font-weight: bold;">JavaQt</span>&nbsp; This library
contains&nbsp; classes the map Qt&nbsp; classes to JMRI classes and
other basic&nbsp; classes used thoughout. <br>
  </li>
  <li><strong>LayoutEditor</strong> This project creates a library of
routines that are used to create and edit a GUI layout panel.</li>
  <li><strong>libTables</strong> This project creates a library that
provides a dialog to display and edit various system tables such as
turnouts, sensors, blocks, etc.</li>
  <li><strong>libPref</strong> This project creates a library with
functions relating to setting and viewing preferences.</li>
  <li><strong>LocoIO </strong>This project adds panels that I have
developed to program LocoIO, LocoServo and LocoBuffer modules. <br>
  </li>
  <li><strong>InstallTest </strong>This project creates an excutable
that JMRI developed to test an installation. <br>
  </li>
  <li><strong>PanelPro&nbsp; </strong>This project creates an
executable for making Control Panels. <br>
  </li>
  <li><strong>QtWebApp&nbsp; </strong>Provides a web server. Local changes to the original package are now inclused in th source tree.<br>
  </li>
</ol>
<h2>Other Package Requirements<br>
</h2>
Several other software software packages must be present in order to
compile. These are:<br>
<br>
<ol>
  <li><strong>QuaZip </strong><strong></strong>This package provides
support for creating and reading zip files. For example, the files
creating a roster can be saved as Zip files. The package (version
0.7.3) can be downloaded from <a href="https://sourceforge.net/projects/quazip/files/latest/download">https://sourceforge.net/projects/quazip/files/latest/download</a><br>
  </li>
  <li><span style="font-weight: bold;">PythonQt </span>This package is
used to support creation and execution of Python scripts. I am using
version 3.1 which has wrappers for Qt version 5.4. <a href="https://sourceforge.net/projects/pythonqt/files/">https://sourceforge.net/projects/pythonqt/files/</a>&nbsp;
See: ([/doc/tip/DecoderPro_app/wiki/Scripting.wiki | Scripting])<br>
  </li>
  <li><span style="font-weight: bold;">Python</span>&nbsp; The version
of Python supported is version 2.7 or later. Python may be included
with your OS. <span style="text-decoration: underline;">There are several Python versions available. For example to install Python 3.4</span></li><ol><li><p>Add the <code>deadsnakes</code> PPA (read more about it at <a href="https://launchpad.net/%7Edeadsnakes/+archive/ubuntu/ppa" rel="noreferrer">https://launchpad.net/~deadsnakes/+archive/ubuntu/ppa</a>):</p>

<pre class="lang-py prettyprint prettyprinted" style=""><code><span class="pln">sudo add</span><span class="pun">-</span><span class="pln">apt</span><span class="pun">-</span><span class="pln">repository ppa</span><span class="pun">:</span><span class="pln">deadsnakes</span><span class="pun">/</span><span class="pln">ppa</span></code></pre></li><li><p>Install <code>python3.4</code>:</p>

<pre class="lang-py prettyprint prettyprinted"><code><span class="pln">sudo apt</span><span class="pun">-</span><span class="pln">get update<br>sudo apt</span><span class="pun">-</span><span class="pln">get install python3</span><span class="pun">.</span><span class="lit">4</span></code></pre></li></ol>
  <li><span style="font-weight: bold;">QtWebApp</span> This package
provides the basic web server functionality. The original QtWebApp
developed by Stefan Frings doesn't suppport WebSockets but there is a
fork available that does: <a href="https://github.com/samiavasil/QtWebApp">https://github.com/samiavasil/QtWebApp&nbsp;
    </a>However there are a few minor changes that need to be made. See
    <a href="QtWebApp.html">QtWebApp.html</a><br>
  </li>
  <li><span style="font-weight: bold;">JMRI </span>While this project
does not use any of the original JMRI code, it does require many of the
support files included with JMRI like icons, html files, decoder files,
etc. For this reason, you must have a copy of JMRI on your PC to be
able to use these files. JMRI source can be downloaded from: <a href="http://jmri.sourceforge.net/download/index.shtml">http://jmri.sourceforge.net/download/index.shtml <br></a></li><li><span style="font-weight: bold;">QtZeroConf</span> This package is required to be able to advertise the Web server and the LnOverTcp server. It can be downloaded from <a href="https://github.com/jbagg/QtZeroConf">https://github.com/jbagg/QtZeroConf</a> It requires that the libavhi-client-dev package be installed. <br></li>
</ol>
<br>
<h2>Downloading the source</h2>
The source repository uses Fossil. Fossil can be downloaded for various
platforms at [http://www.fossil-scm.org/download.html |
http://www.fossil-scm.org/download.html]. Download the program and make
it available in your path as is appropriate for your operating system.
To prepare for downloading the source, perform these steps:
<ol>
  <li>Select a root directory where the source will reside. In my case,
I have a directory called 'Projects' although it can be any name you
choose. </li>
  <li>In the 'Projects' directory, create a directory named
'DecoderPro'. Again, the name you choose for this directory is not
important. </li>
  <li>Change to the 'DecoderPro' directory.</li>
  <li>Clone the source repository with the command: '<strong>fossil
clone http://acksoft.dyndns.biz:1080/cgi-bin/fossil/DecoderPro
decoderpro.fossil</strong>'. This will create a file named
'decoderpro.fossil' which is your local repository copy.</li>
  <li>Next, issue the command '<strong>fossil open decoderpro.fossil</strong>'.
This will download the source and other files in the project. It will
create a directory 'DecoderPro_app in the '../DecoderPro/' directory
containing directories: 'AutoIncreaseBuildNr', 'ftdilib', 'libPr3',
'LocoNetMonitor', 'LayoutEditor', 'Tables' and 'wiki'. </li>
  <li>In QtCreator, open the 'AutoIncreaseBuildNr.pro', 'libPr3.pro'
and 'LocoNetMonitor.pro' project files in their respective directories.
  </li>
  <li>Project AutoIncreaseBuildNr should be built first as it is
required by the other projects. If you want the optional RFID support,
ftdilib must be [/doc/tip/DecoderPro_app/wiki/rfid.wiki |compiled and
built]. Then likewise, the library, libPr3 must be compiled before
LocoNetMonitor.</li>
  <li>The source can be updated at any time with any changes since you
created the project or last ran 'fossil update' at any time by running '<strong>fossil
update</strong></li>
  <li>QtWebApp is stored in a separate Fossil repository: <a href="http://acksoft.dyndns.biz:1080/cgi-bin/fossil/QtWebApp">http://acksoft.dyndns.biz:1080/cgi-bin/fossil/QtWebApp</a><br>
  </li>
</ol>
<h3>Windows</h3>
<p>On Windows, a USB driver is required. There are instructions in the
[http://users.telenet.be/deloof/Locobuffer/LocoBuffer%20EN.pdf|LocoBuffer
Manual] on how to do this.</p>
<h2>Compiling Tips</h2>
Because many classes refer to classes in other libraries, it will
become necessary to take some precautions in order to sucessfully
compile the various libraries. At the present time, the only library
that does not reference classes in any other library is JavaQT.
Therefore, it is recommended that it be compiled first.&nbsp; When
compiling the other libraries, the link will fail when another library
is referenced which is not yet built. To circumvent this, one should
temporarily comment out the references to the libraries that have not
yet been built. This will of course produce a host of unresolved link
errors. But it will create the necessary .so file or .dll file that
other libraries and execuables need. Once a library is built and a .so
or .dll file exists, the commented out references in the various .pro
files for each sub-project can be un-commented. <br>
<br>The Project has been created as several separate project directories as part of an overall Projects directory. In order to avoid extensive changes to the various projects' .pro files, it is recommended that you maintain this structure. When it is necessary for a project to referance another, the ,pro files all can use an environment variable, "PROJ_DIR" to specify the location of the projects directory. This environment variable can be set in Windows environment variables or in Linux as an entry in .bash.rc, e.g. "export PROJ_DIR="/home/allen/Projects". <br><br><h2>Suggested steps to compile the first time</h2><ol><li>Create an Environment variable "PROJ_DIR" that specifies the location of your projects directory where the various packages are kept. The Projects folder well then contain one or more flders/directoried with different projects.<br></li><li>Make sure you have either an installed copy of the Java JMRI app or have downloaded the source from JMRI. It is needed to provide resources like icons and other resources. It is best to insure that you have an environment variable "JMRI_PROG" set to the location of the JMRI code.&nbsp; (<a href="http://jmri.org/help/en/html/doc/Technical/getgitcode.shtml">Jmri Code: Getting the Code) </a><br></li><li>Make sure that you have a copy of QtZeroConf&nbsp; installed and compiled. (It can be downloaded from <a href="https://github.com/jbagg/QtZeroConf">https://github.com/jbagg/QtZeroConf</a> It requires that the libavhi-client-dev package be installed.)</li><li>In QtCreator open project "jmri.pro". Make sure that&nbsp; thw shadow build box is not checked!<br></li><li>Build the JavaQt sub-project.</li><li>Build the QtWebApp sub-project. <br></li><li>Insure that QuaZip has been installed on your system. (The package (version
0.7.3) can be downloaded from <a href="https://sourceforge.net/projects/quazip/files/latest/download">https://sourceforge.net/projects/quazip/files/latest/download</a>)</li><li>Modify the appslib.pro&nbsp; file to  comment out each of the parts referencing other libraries: (libPr3, libPref, Tables, LayoutEditor, LocoIO but not JavaQt. DO NOT comment the "INCLUDPATH" or "DEPENDPATH" statements for these libraries! This will allow the initial libappslib.so file to be created although there will be a large number of undefined references to other libraries not built. When the other libraries have been built, the lines commented out here can be restored.&nbsp; Now build appslib. Verify that the lib file. appslib.so has been created. <br></li><li>Now do the same for LayoutEditor.pro; comment out references to other libraries (except JavaQt and appslib which are already built). <br></li><li><br></li></ol><br>