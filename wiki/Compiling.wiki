<h1>Compiling LocoNetMonitor</h1>
LocoNetMonitor has been developed using QT 4.8.3 although earlier versions should work as well. Qt is available for Linux, Windows, Mac and other
systems. Qt can be downloaded from: [http://qt-project.org/downloads|Qt downloads]. You will also need to download the QtCreator IDE program. Recently, development has used Qt version 5.4 or higher. The recent addition of the Web Server requires the later versions of Qt because of support for WebSockets.&nbsp; 
<p>
The program requires the use of the [http://qt-project.org/wiki/QtSerialPort | QtSerialPort] package which is included in Qt 5.0+ but can be downloaded 
for use with QT 4.x versions. Even though the QtSerialPort module is included with Qt 5.0, it does not, when running on Linux, display
manufacturer or descriptive info. In order to display this info, it is necessary to install the udevlib-dev packagage  ([/doc/tip/DecoderPro_app/wiki/rfid.wiki |instructions])and to download the
current QtSerialPort source (as of August, 2013). As of November, 2013, the QtSerialPort package included with Qt 5.0 provides the nececessary support.</p>
<p>
The program consists of at least 12 sub-projects:
</p><ol>
   <li><strong>appslib </strong>This module contains base libraries for the 3 apps that wil lbe built: DecoderPro3, <br><strong></strong></li><li><strong>AutoIncreaseBuildNr</strong> This is a little utility program that is used to automatically increment the build number in a c++ header file.</li>
	<li><b>DecoderPro3</b> This is one of the several executables produced. It is oriented to working with Rosters, and working with decoders. <br></li>
	<li><b>libPr3</b> This project creates a library that contains classes for accessing LocoNet messages and manages configuration data for 
	LocoIO modules. </li>
 <li><strong>ftdilib</strong> This project supports RFID readers that can be obtained from [https://www.sparkfun.com/products/11839 | Spark Fun Electronics]</li><li><span style="font-weight: bold;">JavaQt</span>&nbsp; This library contains&nbsp; classes the map Qt&nbsp; classes to JMRI classes and other basic&nbsp; classes used thoughout.  <br></li>
 <li><strong>LayoutEditor</strong> This project creates a library of routines that are used to create and edit a GUI layout panel.</li>
 <li><strong>libTables</strong> This project creates a library that provides a dialog to display and edit various system tables such as turnouts, sensors, blocks, etc.</li>
 <li><strong>libPref</strong> This project creates a library with functions relating to setting and viewing preferences.</li><li><strong>LocoIO </strong>This project adds panels that I have developed to program LocoIO, LocoServo and LocoBuffer modules. <br></li><li><strong>InstallTest </strong>This project creates an excutable that JMRI developed to test an installation. <br></li><li><strong>PanelPro&nbsp; </strong>This project creates an executable for making Control Panels. <br></li></ol><h2>Other Package Requirements<br></h2>Several other software software packages must be present in order to compile. These are:<br><br><ol><li><strong>QuaZip </strong><strong></strong>This package provides support for creating and reading zip files. For example, the files creating a roster can be saved as Zip files. The package (version 0.7.3) can be downloaded from <a href="https://sourceforge.net/projects/quazip/files/latest/download">https://sourceforge.net/projects/quazip/files/latest/download</a><br></li><li><span style="font-weight: bold;">PythonQt </span>This package is used to support creation and execution of Python scripts. I am using version 3.1 which has wrappers for Qt version 5.4. <a href="https://sourceforge.net/projects/pythonqt/files/">https://sourceforge.net/projects/pythonqt/files/</a><br></li><li><span style="font-weight: bold;">Python</span>&nbsp; The version of Python supported is version 2.7 or later. Python may be included with your OS. However if you need to install it, it can be found here: <a href="https://www.python.org/downloads/">https://www.python.org/downloads/</a><br></li><li><span style="font-weight: bold;">QtWebApp</span> This package provides the basic web server fucntionality. The original QtWebApp developed by Stefan Frings doesn't suppport WebSockets but there is a fork available that does: <a href="https://github.com/samiavasil/QtWebApp">https://github.com/samiavasil/QtWebApp&nbsp; </a>However there are a few minor changes that need to be made. See <a href="QtWebApp.html">QtWebApp.html</a><br></li><li><span style="font-weight: bold;">JMRI </span>While this project does not use any of the original JMRI code, it does require many of the support files included with JMRI like icons, html files, decoder files, etc. For this reason, you must have a copy of JMRI on your PC to be able to use these files. JMRI source can be downloaded from: <a href="http://jmri.sourceforge.net/download/index.shtml">http://jmri.sourceforge.net/download/index.shtml</a><br></li></ol>



<br><h2>Downloading the source</h2>
The source repository uses Fossil. Fossil can be downloaded for various platforms at 
[http://www.fossil-scm.org/download.html | http://www.fossil-scm.org/download.html]. Download the program and make it available in your 
path as is appropriate for your operating system. 

To prepare for downloading the source, perform these steps: 
<ol>
	<li>Select a root directory where the source will reside. In my case, I have a directory called 'Projects' although
	it can be any name you choose. </li>
	<li>In the 'Projects' directory, create a directory named 'DecoderPro'. Again, the name you choose for this directory is not important. </li>
	<li>Change to the 'DecoderPro' directory.</li>
	<li>Clone the source repository with the command: '<strong>fossil clone http://acksoft.dyndns.biz:1080/cgi-bin/fossil/DecoderPro decoderpro.fossil</strong>'. 
	This will create a file named 'decoderpro.fossil' which is your local repository copy.</li>
	<li>Next, issue the command '<strong>fossil open decoderpro.fossil</strong>'. 
	This will download the source and other files in the project. It will create a directory 'DecoderPro_app in the '../DecoderPro/' 
	directory containing directories: 'AutoIncreaseBuildNr', 'ftdilib', 'libPr3', 'LocoNetMonitor', 'LayoutEditor', 'Tables' and
	'wiki'.  
	</li><li>In QtCreator, open the 'AutoIncreaseBuildNr.pro', 'libPr3.pro' and 'LocoNetMonitor.pro' project files in their respective directories. </li>
   <li>Project AutoIncreaseBuildNr should be built first as it is required by the other projects. If you want the optional RFID support, 
   ftdilib must be [/doc/tip/DecoderPro_app/wiki/rfid.wiki |compiled and built]. Then likewise, the library, libPr3 must be compiled before LocoNetMonitor.</li>	
	<li>The source can be updated at any time with any changes since you created the project or last ran 'fossil update' at any time by running '<strong>fossil update</strong></li><li>QtWebApp is stored in a separate Fossil repository: <a href="http://acksoft.dyndns.biz:1080/cgi-bin/fossil/QtWebApp">http://acksoft.dyndns.biz:1080/cgi-bin/fossil/QtWebApp</a><br></li>
</ol>
<h3>Windows</h3>
<p>On Windows, a USB driver is required. There are instructions in the 
[http://users.telenet.be/deloof/Locobuffer/LocoBuffer%20EN.pdf|LocoBuffer Manual] on how to do this.</p><h2>Compiling Tips</h2>Because many classes refer to classes in other libraries, it will become necessary to take some precautions in order to sucessfully compile the various libraries. At the present time, the only library that does not reference classes in any other library is JavaQT. Therefore, it is recommended that it be compiled first.&nbsp; When compiling the other libraries, the link will fail when another library is referenced which is not yet built. To circumvent this, one should temporarily comment out the references to the libraries that have not yet been built. This will of course produce a host of unresolved link errors. But it will create the necessary .so file or .dll file that other libraries and execuables need. Once a library is built and a .so or .dll file exists, the commented out references in the various .pro files for each sub-project can be un-commented. <br><br>