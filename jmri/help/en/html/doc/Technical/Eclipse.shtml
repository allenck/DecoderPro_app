<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<!-- $Id: Eclipse.shtml 28811 2015-03-04 18:58:22Z mstevetodd $ -->
<html lang="en">
<head>
    <TITLE>
 	JMRI: Building with Eclipse
    </TITLE>
    <META content="Bob Jacobsen" name=Author>
    <meta name="keywords" content="JMRI technical code Eclipse">

    <!-- The combination of "Define" and {Header,Style, Logo and Footer} comments -->
    <!-- are an arbitrary design pattern used by the update.pl script to -->
    <!-- easily replace the common header/footer code for Stu req letter grade Psych 199. Letter from instructor in favor; confirmed with instructor. Approved.Stu req letter grade Psych 199. Letter from instructor in favor; confirmed with instructor. Approved.Stu req letter grade Psych 199. Letter from instructor in favor; confirmed with instructor. Approved. the web pages -->

    <!-- delete the following 2 Defines if you want to use the default JMRI logo -->
    <!-- or change them to reflect your alternative logo -->

<!-- Style -->
  <META http-equiv=Content-Type content="text/html; charset=iso-8859-1">
  <link rel="stylesheet" type="text/css" href="/css/default.css" media="screen">
  <link rel="stylesheet" type="text/css" href="/css/print.css" media="print">
  <link rel="icon" href="/images/jmri.ico" type="image/png">
  <link rel="home" title="Home" href="/">
<!-- /Style -->
</head>


<!--#include virtual="/Header" -->
<!--#include virtual="Sidebar" -->

	<div id="mainContent">
	    <!-- -------- -->
	    <!--  Teaser  --> <!-- Optional -->
	    <!-- -------- -->


<H1>JMRI: Building with Eclipse</H1>

<p>Eclipse (available at <a href="http://www.eclipse.org">www.eclipse.org</a>)
makes a great platform for working with JMRI.</p>

<p>Eclipse is a complex environment to work with. If you're already
familiar with IDEs like Microsoft Visual Studio it won't be too hard to
get used to, but it is definitely worth buying a textbook (e.g. <a
	href="http://www.amazon.com/exec/obidos/tg/detail/-/0321305027/qid=1124158635">
The Java Developer's Guide to Eclipse</a>).</p>

<P>JMRI developers use subversion (SVN) for source control.  The jmri repository is hosted on SourceForge.</P>

<P>These instructions were originally developed and tested using "Eclipse IDE for Java Developers" version "Indigo Release", then updated
and tested using "Luna".</P>
<P>Also note that at the time of writing this help document that JMRI requires JAVA version 8.  You must confirm
that JRE 8 is the default Java Runtime Environment.  Eclipse recommends installing release Luna for Java 8, but there are 
workarounds described online.</P>

<h2>Setting up Eclipse for building JMRI using Subversion</h2>

The standard Eclipse download doesn't have the subversion plugin
enabled. To install subversion tooling do the following:

 <OL>
  <LI>Open Eclipse, creating a workspace if needed.</LI>
  <LI>From the main menu bar select "Help" then "Install New Software..."</LI>
  <LI>Select the "--All Available Sites--" in the "Work with:" selection menu, 
    and enter Subversive in the filter box.  When the results appear, select 
   "Subversive SVN Team Provider", then the "Next" button, 
   and complete the SVN installation as prompted by the program.</LI>
  <LI>You will be asked to restart the program, do so, and then complete the subversion
   installation by selecting a connector (tested with SVN Kit 1.8.7), and follow the prompts..</LI>
 </OL>

 <h2>Getting the JMRI Source using Subversion</h2>

To get the source code from SourceForge using Subversion you need to do
the following:

 <OL>
  <LI>Open Eclipse.</LI>
  <LI>From the main menu bar select "File" then "Import..."</LI>
  <LI>Click on "SVN" then "Project from SVN" then "Next"</LI>
  <LI>Now create a new repository location and enter this URL for read only access:
   "https://svn.code.sf.net/p/jmri/code/trunk/jmri".</LI>
  <P>If you have a SourceForge id and password enter the following URL with your user id in the
   path name: "https://user_id@svn.code.sf.net/p/jmri/code/trunk/jmri". Then when requested submit
   your id and password.</P>
  <LI>Click "Next" then "Finish"</LI>
  <LI>You should now see a window called "Check Out As", click ""Finish"</LI>
  <LI>If all is well, the check out should begin. It will take a while to download all of the
   JMRI files.</LI>
 </OL>

 <P>After the download is complete the Eclipse Package Explorer
should look like this:</P>
<img src="images/EclipsePackageExplorer.png">
<P>After the download is complete, Eclipse will be reporting an
error: Project 'jmri' is missing required source folder: 'java/tmp'.
This will be fixed by running the ant build as described below.

<h2>Building and running JMRI using Ant</h2>

We recommend that before you try and build and run one of the
applications within Eclipse that you run the ant build.xml within Eclipse. This will
create the necessary directories, load some resource icons, and create needed Java files using
JavaCC. To run the ant build.xml you need to do the following: 

<OL>
<li>Ant needs a JDK (Java Development Kit) in order to run the supplied "build.xml" file. The Eclipse
download doesn't include a JDK, so you must download and install a JDK, and then configure ant to
use the JDK.
<li>Here's a link to the Oracle site that can provide you with a JDK: 
<P><a href= "http://www.oracle.com/technetwork/java/javase/downloads/index.html">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a></P></li>
<li>Select the build.xml file using the Package Explorer, then right click, and a menu should
appear.</li>
<li>Now select "Run As" then "2 Ant Build".</li>
<Li>Confirm that under the menu tab JRE that you've selected a JDK, not a JRE.</Li>
<LI>Now press the "Run" button, this should start the ant build.
</OL>

<P>If the ant build fails, most likely it is because you need a JDK (Java
Development Kit) rather than a JRE (Java Runtime Environment) which is
the default. To change the JRE, select "Run As" "2 Ant Build" and a new
window should appear. Select the "JRE" tab. The change the JRE, select
the "Separate JRE:" radio button, and then press the "Installed JREs"
button. If you don't see a JDK, you need to add one (from site above).</P>

<P>If the ant build succeeds, you can now launch any of the JMRI applications from ant, and create a jmri.jar file
if you wish.  Use the "2 Ant Build" and in the window select the "Targets" tab, and
use the appropriate checkbox to generate what you want.</P>

<h2>Building and running JMRI using Eclipse</h2>

 <P>After completing the ant build as described above, you need to refresh the jmri directory.
  Right click on the jmri directory name and select "Refresh". The refresh operation should trigger
  a build of the workspace and the build should complete without error.
 
 <P>To run an application do the following:</P>
 
<ol>

  <LI>You need to verify the compiler compliance level is set to java 1.8. Select under the main
   control bar "Window-&gt;Preferences", then select "Java-&gt;Compiler".
 
    <LI>From the "Run" menu, select "Run Configurations..." We'll use the window that opens to
   configure which program(s) to run. (If the Run menu does not have a "Run Configurations..."
   entry, be sure you selected the java directory in the navigation pane above - Eclipse menus are
   context sensitive)</LI>

  <LI>On the left side, highlight "Java Application", then press the "New" icon above it. The
   icon looks like a document with a plus sign on the upper-right.</LI>

  <LI>You should now have a new "Main" tab highlighted. Above that, replace "New_configuration"
   with "DecoderPro". Below it, enter "jmri" (lower case important) for "Project:" and
   "apps.DecoderPro.DecoderPro" for "Main class:".</LI>

  <LI>Select the "Arguments" tab, and under VM argments enter (You should probably cut and
   paste): <BR> <PRE>
-Xms10m
-Xmx300m
-Djava.security.policy=lib/security.policy 
-Dapple.laf.useScreenMenuBar=true
</PRE> If you're using a 32 bit windows system add the library path: <PRE>
-Djava.library.path=.;lib;lib/windows/x86 
</PRE> Note if you're using a 64 bit windows system change the library path to: <PRE>
-Djava.library.path=.;lib;lib/windows/x64
</PRE>
  </LI>

  <LI>Optional, select the "Common" tab, the section on "Display in favorites menu",
        check the boxes next to "Run" and "Debug"</LI>
    
    <LI>If you'd like to create targets to make it easy to 
        run PanelPro and AllTests, repeat the above steps
        to create a new "Java Application"
        except specifying "apps.PanelPro.PanelPro" and
        "apps.tests.AllTest" respectively.</LI>  
        
    <LI>Click "Apply", then "Close"  (You could click "Run" at this point, but
        we've got a little more to do)</LI>
        
    <LI>You should now be back to the usual Eclipse navigator view, 
        where most development work is done. To see some particular
        java file, expand the "java" folder at the left, then
        the "src" folder, navigating down to the file you want. 
        
    <LI>To run DecoderPro, select it under "Run History" from the "Run"
        menu.  Once you've done that once, you can just click the "Run"
        icon on the toolbar to rerun the last program.
        
    </ol>
    
    <H2>Installing JavaCC Plugin (alternative to Run As Ant Build method above)</H2>

Instead of using the ant build to populate the "tmp" directory, you can install the
JavaCC plugin.  Here's the steps:
<P>
1) Download the Eclipse JavaCC plugin following the instructions found here:
<A HREF="http://eclipse-javacc.sourceforge.net">http://eclipse-javacc.sourceforge.net</A>
<p>
2) After restarting Eclipse, right click on the java directory in the Project Explorer or Navigator and select
   JavaCC Options.  
<p>
3) On the JavaCC Options tab, enter the output directory to be
   java/tmp/jmri/jmris/srcp/parser
<p>
4) On the JJTree options page, enter the output directory to be
   java/tmp/jmri/jmris/srcp/parser
<p>
5) Confirm that the "Java Build Path" includes the tmp directory (see Project Properties).

<H2>Compiler Errors and Warnings</H2>

The default Eclipse compiler configuration produces many unnecessary warnings.  You can adjust the warnings to match the screen shots as
shown below by going to Window-&gt;Preferences and selecting "Java-&gt;Compiler-&gt;Errors/Warnings"

<P>
<img src="images/ErrorsWarningsCodeStyle.png">
</P>
<P>
<img src="images/ErrorsWarningsPotential.png">
</P>
<P>
<img src="images/ErrorsWarningsName.png">
</P>
<P>
<img src="images/ErrorsWarningsUnnecessary.png">
</P>
<P>
<img src="images/ErrorsWarningsAnnotations.png">
</P>

<!--#include virtual="/Footer" -->

      </div>
      <!-- closes #mainContent-->
    <!-- closes #mBody-->

</body>

</body>

</html>
