<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html> <head>
<title><!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<!-- $Id: GitFAQ.shtml 29972 2015-09-16 14:29:20Z jacobsen $ -->
<html lang="en">
<head>
    <TITLE>
 	JMRI: Git FAQ
    </TITLE>
    <META content="Bob Jacobsen" name=Author>
    <meta name="keywords" content="JMRI technical code Git FAQ">

    <!-- The combination of "Define" and {Header,Style, Logo and Footer} comments -->
    <!-- are an arbitrary design pattern used by the update.pl script to -->
    <!-- easily replace the common header/footer code for all the web pages -->

    <!-- delete the following 2 Defines if you want to use the default JMRI logo -->
    <!-- or change them to reflect your alternative logo -->

<!-- Style -->
  <META http-equiv=Content-Type content="text/html; charset=iso-8859-1">
  <link rel="stylesheet" type="text/css" href="/css/default.css" media="screen">
  <link rel="stylesheet" type="text/css" href="/css/print.css" media="print">
  <link rel="icon" href="/images/jmri.ico" type="image/png">
  <link rel="home" title="Home" href="/">
<!-- /Style -->
</head>

<!--#include virtual="/Header" -->
<!--#include virtual="Sidebar" -->

<div id="mainContent">

<h1>JMRI: Git FAQ</h1>

<em>Note that this page is under development.  JMRI
is considering migrating to using Git instead of Subversion (SVN).
Until that's decided and done, this page isn't relevant for 
JMRI users.</em>

  <p>This is a list of Frequently Asked Questions for Git,
     particularly regarding how we use it with JMRI.</p>

  <p>See also the <a href="index.shtml">Technical index</a>
     for more information on maintaining JMRI code.</p>

<h3 id="migrateSVN">Migrating un-committed changes from a SVN checkout</h3>

If you have changes to the JMRI code in an existing SVN checkout, here's what we recommend:

<ol>

<li>&quot;svn update&quot; to the HEAD of SVN. You should be doing this routinely anyway, 
because you'll need to do it before your changes can eventually be submitted.  
Do this now and solve any problems.

<li>Once the SVN repository is frozen, do &quot;svn update&quot; again.  
Solve any conflicts, etc.

<li>Do &quot;svn status&quot; and save the output.  
Double check that no conflicts are showing.

<li>Do &quot;svn diff&quot; and save the output, e.g. as &quot;patch.txt&quot;.

<li>Once git is working and up, clone a copy of the repository to your machine.

<li>In your new clone, do &quot;git checkout SVN-Last-Content&quot;.  
That sets your working copy to be exactly the same as the last contents of SVN, 
the same as the base for the &quot;svn diff&quot; you took earlier.

<li>Then apply the changes between SVN and your code with &quot;patch -p0 &lt; patch.txt&quot;  
(change that to refer to the location of the &quot;svn diff&quot; output file you saved in step 4)

<li>If you had any completely new files in the SVN working directory, 
i.e. ones with &quot;A&quot; or &quot;?&quot; status:
    <ul>
    <li>Copy those files into the corresponding 
        place in your git checkout.
    <li>To &quot;git add (pathname)&quot; on each of them to tell git about them
    </ul>

<li>Do a &quot;git status&quot;.  
You should see the same changed files as the &quot;svn status&quot; you saved earlier.

<li>&quot;git stash save&quot;

<li>&quot;git checkout master&quot; (<em>Is this the right branch?</em>)

<li>&quot;git stash pop&quot; - Depending on how much progress has taken place in Git, 
this might show some conflicts.  If so, you have to resolve them here.

</ol>  
Now you can start developing, without having lost anything.






<h3>Embedded Properties</h3>

When JMRI was originally using CVS, we used lines like:

<code>
<pre>
# The next line is maintained by CVS, please don't change it
# $Revision: 29972 $
</pre>
</code>

as an additional way of tracking file versions.  When we migrated to 
SVN, we kept those in certain files, like decoder XML, properties files, etc,
that users are likely to edit and submit back for inclusion.  

<p>
But with Git, 
<!-- 
    there's really no good way to maintain these automatically,
    http://thomas-cokelaer.info/blog/2014/12/moving-from-svn-to-git-id-equivalent/
    
    see .git/info/attributes
    # see man gitattributes
    # expands $Id: GitFAQ.shtml 29972 2015-09-16 14:29:20Z jacobsen $ but not $Revision: 29972 $ $Author: jacobsen $
    *.xml ident
-->
there's less need for these. 
So we'll be removing these lines as time allows.
If you're working on a file and happen to see one, usually
in the header, you can just delete it.  (If it has somebody's name,
you might want to add that to the copyright notice if there is one.)

<!--#include virtual="/Footer" -->

</div><!-- closes #mainContent-->
</div> <!-- closes #mBody-->
</body>
</html>

</title>
</head>

<body>
<h1></h1>



<hr>
<address></address>
</body> </html>
