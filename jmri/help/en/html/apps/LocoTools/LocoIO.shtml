<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- $Id: LocoIO.shtml 27263 2014-09-21 00:42:15Z jacobsen $ -->
<html lang="en">
<HEAD>
	<META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset=utf-8">
	<TITLE>JMRI LocoIO Programmer Tools</TITLE>

<!-- Style -->
  <META http-equiv=Content-Type content="text/html; charset=iso-8859-1">
  <link rel="stylesheet" type="text/css" href="/css/default.css" media="screen">
  <link rel="stylesheet" type="text/css" href="/css/print.css" media="print">
  <link rel="icon" href="/images/jmri.ico" type="image/png">
  <link rel="home" title="Home" href="/">
<!-- /Style -->

</HEAD>

<!--#include virtual="/Header" -->
<!--#include virtual="Sidebar" -->

	<div id="mainContent">

	    <H1>JMRI LocoIO Programmer Tools</H1>
        
JMRI contains tool to simplify programming the LocoIO accessory 
input/output/controller board.
<P>
This tool was greatly updated by John Plocher for JMRI release 1.8.
The first section of this page is John's description of this 
new programmer.  
The 
<a href="#older">second part of the page</a>
are the instructions for the older programmer, which is still available.

<P>

This version ONLY deals with SV1 & SV2 (address/subaddress) and
SV3-SV50 (primary mode,value1 and value2 for ports 1-16.
In particular, it does NOT address SV0 (board level configuration),
SV51-SV98 (alternate Opcodes) or SV101-124 (servo config).
<P>
Usage model:
<UL>
<LI>Enter a LocoIO address and sub-address
<LI>Click on "probe" button
<LI>If a locoIO is found at that address, its firmware version is displayed
    (the Monitor Loconet window will show all the LocoIOs that responded
    to the probe request if you need to refresh your memory)

<LI>If you wish to change the address of a locoIO board, you MUST
    ensure that it is the ONLY locoIO-based board connected to the
    LocoNet, as the address is set via a broadcast message.  A popup
    will remind you of this.  If you ignore it, then ALL of the locoIOs
    on your loconet will be reprogrammed with the same new address.

<li>"read all" reads all the CV values from the LocoIO specified.
    "write all" writes them all out

<LI>The individual read/write buttons do the same, but for only one
    port at a time.

<LI>"capture" extracts the address out of the next turnout or
    occupancy sensor loconet message it sees and uses it as the
    address of the selected port.
</UL>

<P>
To-Do list:
<UL>
<LI>Need UI to configure the various SV0 states.

<LI>Write a "change address" routine that takes both the
    old and new addresses and does the change without using a
    broadcast address.

<LI>Write a set of config data out to a text file in the
    form used by Hans's programmer, and reread it back when
    requested.
</UL>


<A name="older">

        <h2>Instructions for Older Programmer</h2></a>
			<a href="images/locoio.gif">
			    <img src="images/locoio.gif"
			         width=100 height=50></a>
            <p>
            There was an older LocoIO programmer, which is still available in
            JMRI. This section contains the instructions for that programmer.
            <P>
		    The programmer provides a table-based interface for configuring
		    <a HREF="http://www.locobuffer.com/LocoIO.htm">John Jabour's LocoIO board</a>, 
		    a powerful component for building CTC boards and control
		    panels. (More information on the board is available at
		    <a HREF="http://www.locobuffer.com/LocoIO.htm">http://www.locobuffer.com/LocoIO.htm</a>)
		    </p>

		    <p>A LocoIO board has 16 signal pins, each of which can be
		    programmed as an input or output, and to do a number of
		    different things. The board is also sometimes described as
		    having 16 channels.</p>

		    <p>The channels are configured via LocoNet messages. The
		    LocoIO programmer uses a table to represent the
		    configuration of each channel. </p>

		    <p>
		    The "Action" column is used to select how the channel
		    behaves.  Click in a cell to be given a menu of available
		    choices.  Currently, the choices are:
		    <div class=list>
		    <dl>
		    <dt class=left><dfn>"Toggle switch controls turnout"</dfn></dt>
		    <dd class=first><p>
		    Generate a OPC_SW_REQ to close/throw a turnout
		    when a toggle switch changes state.
		    When the input goes high, a "close" command is
		    sent; when the input goes low, a "throw" command is sent.
		    The channel configuration value is 0x0F.</dd>

		    <dt class=left><dfn>"Input low flips turnout"</dfn></dt>
		    <dd><p>
		    Generate a OPC_SW_REQ LocoNet message
		    when the input goes low.  This
		    is intended for use with a momentary pushbutton.
		    The command sent will alternate the  position
		    of the addressed turnout or signal; if "close" 
		    was last sent, a "throw" will be sent now and vice-versa.
		    The channel configuration value is 0x2F.</dd>

		    <dt class=left><dfn>"Input high flips turnout"</dfn></dt>
		    <dd><p>
		    Generate a OPC_SW_REQ LocoNet message when the input goes
		    high. This is intended for use with a momentary pushbutton.
		    The command sent will alternate the  position of the
		    addressed turnout or signal; if "close" was last sent, a
		    "throw" will be sent now and vice-versa.  The channel
		    configuration value is 0x6F.
		    </dd>

		    <dt class=left><dfn>"Status message sets output"</dfn></dt>
		    <dd>
		    <p> Drive an output from OPC_INPUT_REP input status
		    messages on the LocoNet.  The output goes high when an
		    "input high" message is received, and goes low when an
		    "input low" message is received. These messages are also
		    used for block occupancy status; the output will go high
		    when the block is occupied, and low when its empty.  The
		    channel configuration value is 0XC0.
		    </dd>

		    <dt class=left><dfn>"Turnout close cmd sets output"</dfn></dt>
		    <dd>
		    <p> Drive an output on the LocoIO board from received
		    OPC_SW_REQ commands.  The channel configuration value is
		    0x80. This adjusts the address field to look for a command
		    that sets the turnout "closed".
		    </dd>
		    
		    <dt class=left><dfn>"Turnout throw cmd sets output"</dfn></dt>
		    <dd>
		    <p>Drive an output on the LocoIO board from received
		    OPC_SW_REQ commands.  The channel configuration value is
		    0x80. This adjusts the address field to look for a command
		    that sets the turnout "thrown".
		    </dd>

		    </dl>
		    </div>

		    <p>
		    The "Hex Value1,Value2" column sets the address that the
		    LocoIO board will use for LocoNet communications.  This
		    contains a hexadecimal representation of the two
		    configuration values described in John Jabour's LocoIO
		    programming guide.  You generally won't need to figure out
		    these addresses, as the <span class=button>capture</span>
		    buttons will find them for you.

		    <p>
		    We're also planning to have a "User Address" column
		    that will show the human-readable address for turnouts and sensors.
		    For turnout messages, this is the same number that 
		    you would use on your throttle.  For block occupancy
		    messages, this is the block number. For input status
		    messages, this is the input number, which is twice the 
		    number of the associated turnout, plus one if its
		    a DS54 "switch" input.  

		    <p>
		    The <span class=button>Read</span> button reads from the LocoIO board via the LocoNet
		    and shows the current configuration for that pin.
		    The <span class=button>Write</span> button stores the current settings to the LocoIO board.

		    <p>

		    The <span class=button>Capture</span> button provides an easier way to 
		    find a needed LocoNet address.  Configure the input and output
		    for a particular pin, then press the <span class=button>capture</span> button.
		    The address in the next LocoNet message of the right type will 
		    be put in the address column.  
		    <p>
		    For example, if you
		    have a channel set to act when a "Turnout closed status message"
		    is received, press the <span class=button>capture</span> button and use your
		    throttle to command the correct turnout closed.  
		    <p>
		    As another
		    example, if the channel is configured to send a 
		    "Send throw turnout command", press the <span class=button>capture</span> button and use your
		    throttle to command the correct turnout thrown.

		    <p>
		    At the bottom of the table are some general controls.  The 
		    LocoIO address field sets the address of the board being programmed.
		    LocoIO processors are sent with an address of 1051 programmed; see
		    below for how to change that.
		    Address "0" is a global address which any LocoIO board will
		    respond to; make sure you have only one connected when you use that!
		    <p>
		    The <span class=button>Set address</span> button will use the global address to configure a
		    specific address into a LocoIO board.  Again, make sure you have
		    only one connected. (This button is disabled in the current
		    version while we sort out a problem)
		    <p>
		    The <span class=button>Open...</span> and <span class=button>Save...</span> buttons are not yet implemented. They will
		    eventually allow you to load and store configuration files.
		    <p>
		    The <span class=button>Read All</span> and <span class=button>Write All</span> buttons 
		    read or write all of the channels, and are just a convenience.

		    <p>Status messages during capture/read/write are displayed at the
		    bottom of the window.  If no response is heard from the LocoIO
		    unit, the operation will be retried
		    until it succeeds or until you close the window.

<!--#include virtual="/Footer" -->

</BODY>
</HTML>
