<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en">
<head>
<!-- Copyright Bob Jacobsen 2008 -->
<!-- $Id: Tour.shtml 29403 2015-06-01 00:14:41Z rhwood $ -->
<title>JMRI: DecoderPro Tour</title>

<!-- Style -->
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="stylesheet" type="text/css" href="/css/default.css" media="screen">
<link rel="stylesheet" type="text/css" href="/css/print.css" media="print">
<link rel="icon" href="/images/jmri.ico" TYPE="image/png">
<link rel="home" title="Home" href="/">
<!-- /Style -->
</head>

<body>
<!--#include virtual="/Header" -->

<!--#include virtual="Sidebar" -->
<div id="mainContent">

<H1>A Quick DecoderPro Tour</H1>

<div class="image100w">
<table border=0>
<TR>
<TD VALIGN=top>
<a href="./images/DPStart.gif" ALT="DecoderPro welcome screen">
<IMG SRC="./images/DPStart.gif" WIDTH="100" HEIGHT="50" ALT="DecoderPro welcome screen"></a>
</TD>
<TD>
<H2>Startup</H2>
When you first open the programmer, you see this window.  Click the
"Program locomotive" button to start.  (This assumes you have already
<a href="../../hardware/index.shtml">connected</a> your computer to your layout and
have a locomotive on your programming track)
</TD>
</TR>


<TR>
<TD VALIGN=top>
<a href="./images/SelDecoder.gif" ALT="Decoder Identification">
<IMG SRC="./images/SelDecoder.gif" WIDTH="100" HEIGHT="100" ALT="Decoder Identification"></a>
</TD>
<TD>
<H2>Decoder and Programmer selection</H2>
<p>
You'll get a new window to configure the programmer with
information about a specific type of decoder, or an existing
locomotive.  This will become your locomotive roster as you
program your decoders</p>

<p>
To start working with a newly-installed decoder, click the
adjacent "Ident" button to have the programmer read the decoder
and attempt to identify it.   (You could also explicitly tell
the programmer the decoder type)</p>

<p>
While the programmer is talking to the decoder, status will be
displayed in the bottom of the window; "Idle" or "OK" means
that things are working.  If it succeeds, it will select the
decoder model in the selection box.  Usually it will only be
able to narrow the selection down to a few choices.  Check that
the right model is selected in the "Decoder Installed" box;
update the selection if desired.</p>


<p>
Some people prefer a very simple programmer, and some want to
have access to every feature. To handle this, DecoderPro
provides several different programming interfaces:
<ul>
<LI>Basic - A simple one, with just the most popular information
<LI>Comprehensive - The most complete display, with multiple panes
of detailed information.
<LI>Advanced - Adds advanced panes to the Comprehensive Programmer.
<LI>Registers - Complete configuration for a register-only decoder
<LI>Sample Club - A sample of how a club might define their own
programmer format that shows just their set of required variables
<LI>Tutorial - Not useful for actually programming decoders,
this contains examples of how various special effects can
be obtained when you're constructing your own programmer.
</ul>
<p>You can even define your own programmer if you'd prefer to just see the variables you use.
For this example, we select the "Comprehensive" decoder
programmer in the lowest selection box, and then click "Open
Programmer" to start working with the decoder.  </p>
</TD>
</TR>


<TR>
<TD VALIGN=top>
<a href="./images/BasicPaneY75.gif" ALT="Comprehensive Programmer">
<IMG SRC="./images/BasicPaneY75.gif" WIDTH="100" HEIGHT="50" ALT="Comprehensive Programmer"></a>
</TD>
<TD>
<H2>Programmer Details</H2>
<p class="dl">
Each of the tabs selects a screen you can use to configure
different aspects of the decoder.  The "Basic" pane handles the
address other settings you'll usually need.  
<p class="dl">Using the buttons
  -- On the bottom of each screen are buttons that will read values
  from or write values to the decoder.  For example, to do a
  basic configuration, enter values in the fields and click <TT>Write sheet</TT>.
  The variable fields are color coded to represent their states:
<DL>
<DT STYLE="color:orange; background:#DDD;">Edited</DT><DD>You've changed this value, or it contains default
values from the decoder file.  This is shown as orange, since the
value differs from what's in the decoder.
<DT STYLE="color:yellow; background:#DDD;">From File</DT><DD>The field contains values read from a
locomotive file.  This is shown as yellow, since we're not
certain that the file agrees with the decoder contents.
<DT STYLE="color:white; background:#DDD;">Read</DT><DD>The value shown has been read from the decoder.
This is shown as white to indicate that the value is trustworthy.
<DT STYLE="color:white; background:#DDD;">Stored</DT><DD>The value show has been written to the decoder.
This is also shown as white.
<DT STYLE="color:red; background:#DDD;">Unknown</DT><DD>If something goes wrong with the read or write process,
we might have a completely untrustworthy result.  This results in
the variable's state being marked as UNKNOWN and shown as red.
</DL>
</TD>
</TR>

<TR>
<TD VALIGN=top>
<a href="./images/SpeedTableW75.gif" ALT="Speed table">
<IMG SRC="./images/SpeedTableW75.gif" WIDTH="100" HEIGHT="100" ALT="Speed table"></a><br>
<a href="./images/ModSpeedTable75.gif" ALT="Modified speed table">
<IMG SRC="./images/ModSpeedTable75.gif" WIDTH="100" HEIGHT="100" ALT="Modified speed table"></a><br>
</TD>
<TD>
<H2>Examples</H2>
<p>For example, after a "Read" the speed table values are shown as white in the first image,
While in the second image it shows that when you modify a value, its marked as yellow.
Doing a write will set it back to white; doing a read will reset the
value to the value in the decoder, and also reset it to white.
</TD>
</TR>

<TR>
<TD VALIGN=top>
<a href="./images/FnMap.gif"  ALT="Function Mappings">
<IMG SRC="./images/FnMap.gif" WIDTH="100" HEIGHT="100" ALT="Function Mappings"></a>
</TD>
<TD>
<H2>Complex interactions - function mappings</H2>
<p>
Although having a name for an entire CV is nice, where this really
helps is with complicated bit-mapped options. Digitrax FX lighting
options, for example, require configuring two sets of bits into one CV.
Another example is configuring a Soundtraxx decoder's mapping between
functions and sounds. This involves bits and values spread across a
dozen different CVs, but Decoder Pro turns that configuration job into
simple checking of boxes.</p>
<P>
Each selection box, checkbox or radiobutton is mapped to specific
bit(s) in the decoder's CVs. The programmer handles the reading and
writing of the CVs when the individual settings are changed. Instead of
bits, you're working with the name or description from the decoder
manual.
</p>
</TD>
</TR>


<TR>
<TD VALIGN=top>
<a href="./images/Digitrax75.gif" ALT="Digitrax DH142">
<IMG SRC="./images/Digitrax75.gif" WIDTH="100" HEIGHT="100" ALT="Digitrax DH142"></a>
</TD>
<TD>
<H2>Decoder-specific programmer panels</H2>
<p>
DecoderPro is meant to be easily configurable to add new types of
decoders. You can also add programmer sheets, change their layout, and
even redo the entire appearance. To do that, DecoderPro is driven by
human-readable files in XML format. Documentation on the file contents
exists, and we're working to continuously update it.</p>

<P>These files make it convenient to update DecoderPro to work with a
new decoder. For example, the unique capabilities of a Digitrax DH142
appear on a "Digitrax" sheet.</p>

<p>
Additional decoder-specific variables and sheets can be added via
configuration files. By choosing an industry-standard XML format for
decoder information, we hope to make it possible to create a complete
library. Perhaps we can even interest manufacturers in documenting
their products in this format.
</p>
</TD>
</TR>


<TR>
<TD VALIGN=top>
<a href="./images/CVtable75.gif" ALT="CV Programmer">
<IMG SRC="./images/CVtable75.gif" WIDTH="100" HEIGHT="100" ALT="CV Programmer"></a>
</TD>
<TD>
<H2>Direct CV Programming</H2>
<p>
Its also possible to program the CVs directly using the CV Programmer.
The "Read" and "Write" buttons allow you to work with individual CV
contents. Changes made here will also update any associated values
found on other programmer screens.</p>
</TD>
</TR>

<TR>
<TD VALIGN=top>
<a href="./images/Roster75.gif" ALT="Rosters">
<IMG SRC="./images/Roster75.gif" WIDTH="100" HEIGHT="100" ALT="Rosters"></a>
<p>For more info, see <a href="./Roster.shtml">Roster Topics</A></p>
</TD>
<TD>
<H2>Locomotive Rosters</H2>
<p>
DecoderPro maintains a roster of your locomotives. You can save the
decoder configuration, and then later work with the stored CV values
instead of having to read them from the decoder. This saves the time it
takes to read a complete decoder, which can be quite long. The roster
can also store locomotive information for you. The "Roster Entry" sheet
displays this info and allows you to edit it.</p>

<P>
Click "Save" to store the roster information to a file on your
computer's local disk; you'll be reminded to do this if you close the
programmer with any unstored information.</p>

<p>
The "ID" field at the top is the name you'll later use to select this
locomotive.
</p>
</TD>
</TR>

<TR>
<TD VALIGN=top>
<a href="./images/SelLoco.gif" ALT="Selecting a roster entry">
<IMG SRC="./images/SelLoco.gif" WIDTH="100" HEIGHT="100" ALT="Selecting a roster entry"></a>
</TD>
<TD>
<H2>Selecting a roster entry</H2>
<p>
During DecoderPro startup, you can select a specific locomotive to work with
by using the "Use locomotive settings for ..." pulldown menu.
</p>

<P>
The "Ident" button uses the DCC address to select a specific locomotive
in the roster. When you click "Open Programmer" with a specific
locomotive selected, the programmer opens each sheet with the current
values already present.</p>

<P>You can print the current locomotive's information from the
programmer windows. From the "File..." menu, select "Print...", and
fill out the dialog box that's presented. </p>
</TD>
</TR>
</TABLE>

<h2>More Info</h2>

For more information on how to setup and use DecoderPro,
please see 
<a href="http://jmri.org/help/en/html/apps/DecoderPro/index.shtml">the manual pages</a>.
<p>
There's also more information
available on 
<a href="MoreInfo.shtml">how DecoderPro works</a>,
including how to 
<a href="CreateDecoder.shtml">how to add new decoder types</a>.

</div>
    
<!--#include virtual="/Footer" -->
</body>
</html>
