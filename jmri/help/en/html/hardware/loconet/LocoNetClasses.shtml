<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<!-- $Id: LocoNetClasses.shtml 29962 2015-09-16 06:20:30Z jacobsen $ -->
<html lang="en">
<head>
    <TITLE>
 	JMRI: LocoNet&reg; Implementation
    </TITLE>
    <META content="Bob Jacobsen" name=Author>
    <meta name="keywords" content="JMRI LocoNet technical implementation">

    <!-- The combination of "Define" and {Header,Style, Logo and Footer} comments -->
    <!-- are an arbitrary design pattern used by the update.pl script to -->
    <!-- easily replace the common header/footer code for all the web pages -->

    <!-- delete the following 2 Defines if you want to use the default JMRI logo -->
    <!-- or change them to reflect your alternative logo -->

<!-- Style -->
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="stylesheet" TYPE="text/css" HREF="/css/default.css"
	MEDIA="screen">
<LINK REL="stylesheet" TYPE="text/css" HREF="/css/print.css"
	MEDIA="print">
<LINK REL="icon" HREF="/images/jmri.ico" TYPE="image/png">
<LINK REL="home" TITLE="Home" HREF="/">
<!-- /Style -->
</HEAD>

<BODY>
<!--#include virtual="/Header" -->

  <div class="nomenu" id="mBody">
    <div id="mainContent">


<H1>Information on the JMRI LocoNet&reg; implementation</H1>


This page describes various high-level structures of the JMRI LocoNet&reg; implementation.
Please see also the 
<A HREF="http://jmri.sourceforge.net/JavaDoc/doc/jmri/jmrix/loconet/package-summary.html">JavaDocs for the jmrix.loconet package</A>.

<h2>LocoNet-specific values</h2>
The 
<A HREF="http://jmri.sourceforge.net/JavaDoc/doc/jmri/jmrix/loconet/LnConstants.html">LnConstants class</a>
provides static, final constants to represent
various fields and values in LocoNet messages.  At some point, some of this
should be built into to the specific classes (i.e. LocoNetMessage) so the coding and 
decoding algorithms don't have to appear in so many places.

<h2>Sending and receiving LocoNet messages</h2>

The
<A HREF="http://jmri.sourceforge.net/JavaDoc/doc/jmri/jmrix/loconet/LocoNetInterface.html">LocoNetInterface</A> class
provides the basic connection to a LocoNet for
user classes. Messages are sent by passing them to a LocoNetInterface
implementation, and you can register with a LocoNetInterface
to be notified of all LocoNet traffic.
<P>
<IMG SRC="images/LocoNetInterfaceUML.png" alt="UML of JMRI's LocoNet Interface">
<P>
The 
<A HREF="http://jmri.sourceforge.net/JavaDoc/doc/jmri/jmrix/loconet/LocoNetMessage.html">LocoNetMessage</A> class
represents the basic message.  Currently (July 2001), this 
class doesn't really help other code construct and decode LocoNet packets, but
rather just contains them.  This should be improved.
<P>
The steps to send a message to the LocoNet are:
<OL>
<LI>Create a <A HREF="http://jmri.sourceforge.net/JavaDoc/doc/jmri/jmrix/loconet/LocoNetMessage.html">LocoNetMessage</A> object,
and fill it with the message you want to send.  It's not necessary to fill in the
error-check byte; that will be done as part of sending.
<LI>Locate an object providing a 
<A HREF="http://jmri.sourceforge.net/JavaDoc/doc/jmri/jmrix/loconet/LocoNetInterface.html">LocoNetInterface</A>
interface.  In many cases, the 
<A HREF="http://jmri.sourceforge.net/JavaDoc/doc/jmri/jmrix/loconet/LnTrafficController.html">LnTrafficController</A> is providing this, and the
object can be located with
	<PRE>
		LocoNetInterface l = LnTrafficController.instance();
	</PRE>
<LI>Send the message:
	<PRE>
		l.sendLocoNetMessage(msg);
	</PRE>
</OL>

<P>
Classes that want to receive inbound LocoNet packets should implement the 
<A HREF="http://jmri.sourceforge.net/JavaDoc/doc/jmri/jmrix/loconet/LocoNetListener.html">LocoNetListener</A> interface, 
and register their desire to listen 
via an object with a 
<A HREF="http://jmri.sourceforge.net/JavaDoc/doc/jmri/jmrix/loconet/LocoNetInterface.html">LocoNetInterface</A> interface.  
It's important to note that
listener objects can't assume that they receive incoming LocoNet messages 
in any specific thread.  In particular, they should not assume that they 
receive these messages in a GUI thread, so they'll have to forward any
changes to the user interface.

<h2>Implementing the LocoNet connection</h2>
Implementing communication with a real LocoNet is handled by 
classes that implement the LocoNetListener interface.
There are currently four: 
<A HREF="http://jmri.sourceforge.net/JavaDoc/doc/jmri/jmrix/loconet/LnTrafficController.html">LnTrafficController</a>
and its subclasses
<A HREF="http://jmri.sourceforge.net/JavaDoc/doc/jmri/jmrix/loconet/LnTrafficPacketizer.html">LnTrafficPacketizer</a>,
<A HREF="http://jmri.sourceforge.net/JavaDoc/doc/jmri/jmrix/loconet/LnTrafficRouter.html">LnTrafficRouter</a>,
and
<A HREF="http://jmri.sourceforge.net/JavaDoc/doc/jmri/jmrix/loconet/LocoNetInterfaceScaffold.html">LocoNetInterfaceScaffold</a>.

<h3>LnTrafficController</h3>
The 
<A HREF="http://jmri.sourceforge.net/JavaDoc/doc/jmri/jmrix/loconet/LnTrafficController.html">LnTrafficController</a>
abstract class provides some common implementation for it's subclasses, and
adds a mechanism to find a usable LocoNetInterface implementation.
<P>
The routine addLocoNetListener and removeLocoNetListener methods are implemented here,
along with a notify method to forward LocoNetMessages to the listeners.
<P>
The static instance() method is used by a large number of jmrix.loconet classes
to find a LocoNetInterface for transmitting and receiving messages. It works through
a "self" static member, which is initialized with a LnTrafficController 
subclass object is created.  All objects wanting to send or receive over the
LocoNet will thence use the last-created LnTrafficController implementation.
See the section on "<a href="#startup">Startup</a>" for more information on this.

<P>
<img src="images/LnTrafficControllerUML.png" alt="UML of JMRI's LocoNet Traffic Controller">

<h3>LnTrafficPacketizer</h3>
The
<A HREF="http://jmri.sourceforge.net/JavaDoc/doc/jmri/jmrix/loconet/LnTrafficPacketizer.html">LnTrafficPacketizer</a>
class extends the LnTrafficController implementation to send and receive
packets over a LocoBuffer serial link to a LocoNet.

It works with an implementation of the 
<A HREF="http://jmri.sourceforge.net/JavaDoc/doc/jmri/jmrix/loconet/LnPortController.html">LnPortController</A> - 
Abstract class, which works at the level of character streams.
These communicate through Java streams which carry the LocoNet messages as 
character sequences.  LnPortController implementations are 
available for the LocoBuffer, MS100 and for reading from a hex log file.
<P>
It uses separate threads for transmission and reception of characters from the streams.
The receive operation is done in a thread so it can easily stall when no messages
are available.  The transmit operation is done in a thread for a similar reason; 
sometimes a LocoBuffer will shut off input (output from the program), which causes
the stream write operations to stall.  By doing those in a separate thread, we can
detect or at least bypass this without the entire program coming to a stop.

<h3>LnTrafficRouter</h3>
The 
<A HREF="http://jmri.sourceforge.net/JavaDoc/doc/jmri/jmrix/loconet/LnTrafficRouter.html">LnTrafficRouter</a>
class provides a scatter-gather operation for the LocoNetListener interface.
Note that this implementation doesn't transform the LocoNetMessages into serial traffic.

<BR><img src="images/LocoNetConnections.gif" alt="Drawing of how various objects route messages" width="640" height="480">
<BR>

Note the two LnTrafficRouter object. It provides a LocoNetInterface for all
the LocoNet-using messages in the remote node, so that only
one copy of each message has to travel across the remote link.
<P>
Note that the "some remote comm class" could also be implemented as a subclass of LnTrafficRouter,
instead of communicating with one.

<h3>LocoNetInterfaceScaffold</h3>
The 
<A HREF="http://jmri.sourceforge.net/JavaDoc/doc/jmri/jmrix/loconet/LocoNetInterfaceScaffold.html">LocoNetInterfaceScaffold</a>
class provides a LnTrafficController implementation for use in test programs.
Rather than communicate with a real LocoNet, it provides scaffolding to 
make it easy to test the transmission and receipt of messages.


<h2><a name="startup">Startup</a></h2>
There are "action" classes that connect to an input source.   The main 
program puts these in a menu, on a button, etc, so that the user can select the
connection desired. The current (March 2002) set is:
<UL>
<LI>LocoBufferAction - creates a LocoBufferAdapter object and configures for operation
with a LocoBuffer
<LI>MS100Action - creates a MS100Adapter object and configures for operation with
an MS100
<LI>LnHexFileAction - creates an LnHexFilePort object and configures for operation
as "LocoNet Simulator" (previously, this was known as "LocoNet Hex File", as it
can load contents from a file of hexadecimal strings)
</UL>
<BR>
In addition to configuring the adapter for the input source, 
something has to configure the complete set of Manager objects and the
LocoNet-handling objects.  These include:
<UL>
<LI>Typically a LnPacketizer, which becomes the "instance" for 
objects that use LnTrafficController.instance() to locate an interface.
<LI>A ProgrammerInstance
<LI>A PowerManagerInstance
<LI>A TurnoutManagerInstance
</UL>
These last three provide LocoNet-based services for the higher-level
JMRI interfaces.
<P>
The configure() methods in the various adapter classes do this.
That's not a very general mechanism.  Although a LnPacketizer
is the right thing to connect to each of the serial port adapters,
the rest of the configuration might vary.

<h2>Port adapters</h2>
<A HREF="http://jmri.sourceforge.net/JavaDoc/doc/jmri/jmrix/loconet/LnPortController.html">LnPortController</A>
is an abstract base class to carry common implementations for the Adapter
classes that connect to serial ports with specific protocols. 

<h4>MS100</h4>

Note that the current MS100 implementation is not as robust as we really need it to be.
In particular, back-off and retransmit is not being checked.  Other interface devices, 
such as the Digitrax PR3, the LocoBuffer, LocoBuffer-II, and LocoBuffer-USB all
implement an internal microcontroller which handles back-off and retransmit
operations properly and are therefore preferred over the MS100.
<P>

The MS100Action class (package jmrix.loconet.ms100) starts up a LocoNet connection
via a MS100.  When triggered, it creates a visible MS100Frame object.
<P>
In turn, the MS100Frame creates an MS100Adapter object, 
then shows the available comm ports, allowing the user to pick one.
The MS100Adapter object implements the LnPortController interface, so 
it can eventually connect an LnTrafficController to a serial port and MS100.
<P>
When the "Open MS100 port" button is pressed, the MS100Frame object
<UL>
<LI>passes the selected communication port
to the MS100Adapter.  The MS100 adapter then
connects to that port and creates
input and output streams
<LI>then makes sure that
a LnTrafficController object exists by calling the LnTrafficController.instance
method
<LI>connects that LnTrafficController instance to the MS100Adapter (subclass of LnPortController)
<LI>starts LnTrafficController in a new thread so that it can handle inbound
messages asynchronously.
</UL>

<h4>LocoBuffer</h4>

Very similar to the MS100 case, with the same sequence of operations.  The port setup
is somewhat different. Classes are in the jmrix.loconet.locobuffer package.

<h4>HexFile</h4>

The HexFile classes (package jmrix.loconet.hexfile) are meant to
simulate a LocoNet connection from a data file.  
The provide the "LocoNet Simulator" connection type.
A hexadecimal format data file feeds in messages
as if they came from an outside connection.  

<P>Initialization is provided by the HexFileAction class.
When triggered, it creates a visible HexFileFrame object. 
This provides a button the user can use to select an input file.
<P>
When a file is selected, the HexFileFrame object
<UL>
<LI>creates a HexFileAdapter object
connected to that file
<LI>then makes sure that
a LnTrafficController object exists by calling the LnTrafficController.instance
method
<LI>connects that LnTrafficController instance to the HexFileAdapter (subclass of LnPortController)
<LI>starts LnTrafficController in a new thread so that it can handle inbound
messages asynchronously.
</UL>
<P>
Unlike the
MS100Frame and LocoBufferFrame objects, the HexFileFrame object stays
visible so that it can control the flow of messages from the file.

<h2>Slot and Programmer management</h2>

"Slots" are basic to the operation of a LocoNet command station.  They are represented
by the LocoNetSlot class.  Like LocoNetMessage, this class does not (yet) provide a lot
of support for creating and decoding slot status.  The SlotManager class listens to LocoNet
traffic to keep an up-to-date idea of the command stations slot contents.  It ma someday
be necessary for the SlotManager to actively communicate with the command station to 
update that information, but for not the SlotManager only listens to slot change commands that
originate on the LocoNet or are transmitted from the program.
<P>
The SlotListener interface should be implemented by any class that wants to be 
notified when a slot changes.
<P>
Because Digitrax command stations handle programming via a special reserved
slot, the jmri.Programmer interface is also implemented by the loconet.SlotManager class.
This greatly complicates the class, but is acceptable for now.

<p>LocoNet&reg; is a registered trademark of <a href="http://www.digitrax.com">Digitrax, Inc.</a></p>

    </div>

<!--#include virtual="/Footer" -->
</body>
</html>
