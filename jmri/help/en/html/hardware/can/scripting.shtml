<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en">
<head>
<!-- Copyright ($Author: jacobsen $) 2008 -->
<!-- $Id: scripting.shtml 27263 2014-09-21 00:42:15Z jacobsen $ -->
<title>JMRI: CAN Network Support</title>

<!-- Style -->
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="stylesheet" TYPE="text/css" HREF="/css/default.css"
	MEDIA="screen">
<LINK REL="stylesheet" TYPE="text/css" HREF="/css/print.css"
	MEDIA="print">
<LINK REL="icon" HREF="/images/jmri.ico" TYPE="image/png">
<LINK REL="home" TITLE="Home" HREF="/">
<!-- /Style -->
</HEAD>

<BODY>
<!--#include virtual="/Header" -->
  <div class="nomenu" id="mBody">
    <div id="mainContent">

<h1> 
JMRI: CAN Scripting
</h1>

JMRI scripting can be used to 
send and receive CAN frames. 
You can use this to create test routines for 
boards under development, etc.

<p>
This page describes the CAN extensions for JMRI scripting.
For more information on JMRI scripting itself,
see the
<a href="../../tools/scripting/index.shtml">help pages</a>.

<p>
There's a basic
<a href="../../../../../jython/CanExample.py">CanExample.py</a>
sample script in the jython directory.

<h2>Sending CAN Frames</h2>

CAN frames are created as objects, then queued for 
transmission.  The header (ID) and data are handled 
separately.

<code><pre>
frame = jmri.jmrix.can.CanMessage(2)  # will load 2 bytes
frame.setId(0x123)
frame.setElement(0, 0x45)
frame.setElement(1, 0x67)
jmri.jmrix.can.TrafficController.instance().sendCanMessage(frame, None)
</pre></code>

<h2>Receiving CAN Frames</h2>

A script can listen for CAN frames as they're received
from the bus, and separately for CAN frames that are being
transmitted on the bus by JMRI.  
The CanListener interface provides these separately
via "reply" and "message" procedures, respectively.

<code><pre>
class MyCanListener (jmri.jmrix.can.CanListener) :
    def message(self, msg) :
        # handle transmitted CAN frames by ignoring them
        return
    def reply(self, msg) :
        # handle received CAN frames by printing their content
        print "received Frame"
        print "ID: 0x"+java.lang.Integer.toHexString(msg.getId())
        print "content: ", msg.toString()
        return
    
jmri.jmrix.can.TrafficController.instance().addCanListener(MyCanListener())
</pre></code>

<!--#include virtual="/Footer" -->
</body>
</html>
